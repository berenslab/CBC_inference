/* square array of cones */
/* connected by gap junctions */
/* square array of B-horizontal cells, connected by gap junctions */
/* square array of A-horizontal cells, connected by gap junctions */
/* inhibitory feedback from hz cells to cones */
/* 22 um blur */


timinc = 1e-4;
crit = 1e-8;
endexp = .05;
ploti = .001;
relax = .15;
drm = 20000;
conlam = .5;

arrsiz = 40;			/* size of cone array */

hzsiza = 14;			/* size of type A horizontal cells */
hzsizb = 10;			/* size of type B horizontal cells */
cov_a = 4;                      /* coverage factor type A hz cell to cone */
cov_b = 6;                      /* coverage factor type B hz cell to cone */
nhconn = 10;
nconn = 10;
soma = 0;

hza = 16000;					/* first type A hz cell */
hzb = 15000;					/* first type B hz cell */

stimtime = .04;
scal = 6;
//scatter = 1;
drg = 2.5e6;
gjcond =  100e-9;
hagjcond = 100e-9;
hbgjcond = 5e-9;
hbrm = 20000;
conerm = 20000;
conrest = -.0377;
conrestt = -.0377;
hzrev = -0.07;
hresta = -.045;
hrestb = -.046;
hrestta = -.041;
hresttb = -.041;
hzthr = -.05;
expona = 2;
exponb = 2;
exponf = 2;
conda = 2e-10;
condb = 2e-10;
condf = 1e-10;
fbtau = 20;

x = setvar();

hzmaxa = int (arrsiz / hzsiza * sqrt(cov_a)) - 1;	/* size of HzA array */
hzmaxb = int (arrsiz / hzsizb * sqrt(cov_b)) - 1;	/* size of HzB array */

totsiz = arrsiz * arrsiz + 1;
hztot = hzmaxb * hzmaxb + 1;		/* make large enough for type A or B */

include "mid.m";

mida = hza + midrow(hzmaxa);		/* center node in array */
midb = hzb + midrow(hzmaxb);
midc =       mid(arrsiz);

rada = hzmaxa/2;			/* radius for plotting */
radb = hzmaxb/2;
radc = arrsiz/2;
cent = radc*scal;			/* location of stimulus in microns */

dim conarr[arrsiz][arrsiz][4];
dim gconnect[totsiz][nconn];

dim hzarr[2][hzmaxb][hzmaxb][2];	/* array to hold either type A or B */
dim hzconn[2][hztot][nhconn];

include "con4.m";
include "congj.m";
include "conhz5.m";


for (i=0; i<totsiz; i++) 
  for (j=0; j<nconn; j++) {
   gconnect[i][j] = -1;
};

for (k=0; k<2; k++) 
 for (i=0; i<hztot; i++) 
  for (j=0; j<nhconn; j++) {
   hzconn[k][i][j] = -1;
};
                                        /* make test cone to find resting V */
testcon = 18000;

ped = mcone(0,0, testcon); 
stim cone [testcon][0] inten 100 start 0 dur .05;

for (hztype=0; hztype<2; hztype++) {
   if (hztype == 0) {                             /* A-type Hz */
    hzsiz = hzsiza; 
    hznode = hza;
    hrest = hresta;
    hrestt = hrestta;
   };
   if (hztype == 1) {                             /* B-type Hz   */
    hzsiz =  hzsizb;
    hznode = hzb;
    hrest = hrestb;
    hrestt = hresttb;
   };

                                /* Make one hz cell of each type. */
                                /* Duplicate morphology, but connect */
                                /* all dendrites to same test cone */

  for (dend=1,k=0; k<hzsiz; k++)                     /* connect to hz */
   for (h=0; h<hzsiz; h++,dend++) {
      conn [testcon][ped] to [hznode][dend][1]
        synapse  open expon=exponf maxcond=condf thresh= -.045 vrev= -.01;

      conn [hznode][dend][1] to [hznode][dend][2]
         cable dia=.1 length=10 rm=hbrm vrev=hzrev vrest=hrestt;

      conn [hznode][dend][2] to [hznode][soma]
         cable dia=2 length=20 rm=hbrm vrev=hzrev vrest=hrest;
  };
  at [hznode][soma] sphere dia=15 rm=hbrm vrev=hzrev vrest=hrest;

                /* make # feedback synapses equal to coverage factor */

  dend = 1;
  if (hztype == 0) {
    conn [hznode][dend][1] to [testcon][ped]
  synapse  open expon=expona maxcond=cov_a*conda thresh=hzthr vrev=-.067;
  }
  else if (hztype == 1) {
    conn [hznode][dend][1] to [testcon][ped]
  synapse  open expon=exponb maxcond=cov_b*condb thresh=hzthr vrev=-.067;
  };
}; /* for (hztype; ;) */

/*  plot V[testcon][1]; */
/*  plot V[hznode][soma];  */

run;

conrest = V[testcon][0];                /* find the resting potentials */
conrestt = V[testcon][1];               /* find the resting potentials */
hresta   = V[hza][soma];
hrestb   = V[hzb][soma];
hrestta   = V[hza][1][1];
hresttb   = V[hzb][1][1];
print "#Cone rest: ",conrest;
print "#Cone term rest: ",conrestt;
print "#Hz rest a:   ",hresta;
print "#Hz rest b:   ",hrestb;
print "#Hz tip rest a:   ",hrestta;
print "#Hz tip rest b:   ",hresttb;

erase model;
time = 0;

x = 0;
for (j=0; j<arrsiz; j++)                                /* make the cones */
  for (i=0; i<arrsiz; i++) {
    ped = mcone(i*scal,j*scal, x); 
    conarr[i][j][0] = x;                /* cone major node */
    conarr[i][j][1] = ped;              /* pedicle minor node */
    conarr[i][j][2] = 0;                /* count of type A contacts on cone */
    conarr[i][j][3] = 0;                /* count of type B contacts on cone */
    x++;
};

                                        /* make gap junctions betw cones */
                        
condist = 10;
for (j=0; j<arrsiz; j++)
  for (i=0; i<arrsiz; i++)
    for (k=j-1; k <= j+1; k++)
      for (h=i-1; h <= i+1; h++) {
          if (k<0 || k>=arrsiz) continue;
          if (h<0 || h>=arrsiz) continue;
          if (i==h && j==k) continue;
          congj (i,j,h,k);
      };

for (hztype=0; hztype<2; hztype++) {
 if (hztype == 0) {                             /* A-type Hz */
  hznum = hzmaxa;
  hzsiz = hzsiza;
  hznode = hza;
  hzoff = int (hzsiz/sqrt(cov_a));
  hzst = hzsiz/2;
  hrest = hresta;
  hrestt = hrestta;
 };
 if (hztype == 1) {                             /* B-type Hz */
  hznum = hzmaxb;
  hzsiz = hzsizb;
  hznode = hzb;
  hzoff = int (hzsiz/sqrt(cov_b));
  hzst = hzsiz/2;
  hrest = hrestb;
  hrestt = hresttb;
 };

 hzcount = 0;
 for (hzly=hzst,j=0; j<hznum; hzly+=hzoff, j++)
  for (hzlx=hzst,i=0; i<hznum; hzlx+=hzoff, i++, hznode++, hzcount++) {
   hzx = hzlx - hzsiz/2;           /* (hzx,hzy) is ll corner of hz cell */
   hzy = hzly - hzsiz/2;
  
   for (dend=1,k=0; k<hzsiz; k++)                     /* connect to hz */
    for (h=0; h<hzsiz; h++,dend++) {
     x = h + hzx;
     y = k + hzy;
     if (x<0 || x>=arrsiz) continue;
     if (y<0 || y>=arrsiz) continue;
     cnode = conarr[x][y][0];
     ped  = conarr[x][y][1];
     conarr[x][y][2+hztype]++;                /* increment synapse count */
     conn [cnode][ped] to [hznode][dend][1]
  synapse  open expon=exponf maxcond=condf thresh=-.045 vrev=-.01;

    if (hztype == 0) {
    conn [hznode][dend][1] to [cnode][ped]
  synapse open expon=expona maxcond=conda thresh=hzthr vrev=-.067
                 nfilt2 1 timec2=fbtau;
    }
    else if (hztype == 1) {
    conn [hznode][dend][1] to [cnode][ped]
  synapse open expon=exponb maxcond=condb thresh=hzthr vrev=-.067
                 nfilt2=1 timec2=fbtau;
    };

    conn [hznode][dend][1] to [hznode][dend][2]
         cable dia=.1 length=10 rm=hbrm vrev=hzrev vrest=hrestt;

/*  dx = hzlx - x;
    dy = hzly - y;
    cablen = sqrt (dx*dx + dy*dy) * scal;    /* */
    cablen = 20;
    conn [hznode][dend][2] to [hznode][soma]
         cable dia=2 length=cablen rm=hbrm vrev=hzrev vrest=hrest;
   };
  at [hznode][soma] sphere dia=15 rm=hbrm vrev=hzrev vrest=hrest;
  hzarr[hztype][i][j][0] = hzcount;
  hzarr[hztype][i][j][1] = hznode;
 };
 print "#  hzcount",hzcount;

}; /* for (hztype; ;) */

proto_hza = 26000;
proto_hzb = 25000;
at proto_hza sphere dia=1 vrest=hrestta;
at proto_hzb sphere dia=1 vrest=hresttb;

conn [hzb][20][1] to proto_hzb vbuf;          /* make prototype buffers */ 
conn [hza][20][1] to proto_hza vbuf;          /*  to eliminate edge effect */



 for (x=0; x<arrsiz; x++) {
   for (y=0; y<arrsiz; y++) {
    if (conarr[x][y][2] < cov_a) {
       synweight = cov_a - conarr[x][y][2]; 
       cnode = conarr[x][y][0];
       ped  = conarr[x][y][1];
       conn [proto_hza] to [cnode][ped]
      synapse  open expon=expona maxcond=conda*synweight
                thresh=hzthr vrev=-.067 nfilt2=1 timec2=fbtau;
       conarr[x][y][2] += synweight;
    };
    if (conarr[x][y][3] < cov_b) {
       synweight = cov_b - conarr[x][y][3]; 
       cnode = conarr[x][y][0];
       ped  = conarr[x][y][1];
       conn [proto_hzb] to [cnode][ped]
         synapse  open expon=exponb maxcond=condb*synweight
                thresh=hzthr vrev=-.067 nfilt2=1 timec2=fbtau;
       conarr[x][y][3] += synweight;
    };
  };
};


                                        /* print the hz coverage factor */
/*
for (hztype=0; hztype<2; hztype++) {
  print "# type ",hztype, " nconn: ";
  for (x=0; x<arrsiz; x++) {
    for (y=0; y<arrsiz; y++)
      printf ("%2g ",conarr[x][y][2+hztype]);
    printf ("\n");
  };
};                      /* */


                                /* make gap junctions betw A hz cells */

for (hztype=0; hztype<2; hztype++) {
  if (hztype==0) {			/* type A Hz cells */
     hgjcond = hagjcond;
     hzmax = hzmaxa;
  }
  else if (hztype==1) {			/* type B Hz cells */
     hgjcond = hbgjcond;
     hzmax = hzmaxb;
  };
  for (i=0; i<hzmax; i++) 
   for (j=0; j<hzmax; j++)
     for (h=i-1; h<i+1; h++) 
      for (k=j-1; k<j+1; k++) {
          if (k<0 || k>=hzmax) continue;
          if (h<0 || h>=hzmax) continue;
          if (i==h && j==k) continue;
          conhz (i,j,h,k);
      };
};

stim file hz284s.t;
stim center (cent,cent); 
stim backgr 100 start 0;
stim spot 1 loc (cent,cent) blur=22 inten=2.5e9 start=stimtime dur=.001;

plmax = -.04;
plmin = -.05;
if (int(midc/2)*2 == midc) fpl = 10	/* plot cones */
else                       fpl = 9;
for (i=0; i<fpl; i++) {				/* plot the center */
   plot V[midc-i][1];
};
for ( i;i<30 && i<=radc; i+=2) {		/* plot the skirt */
   plot V[midc-i][1];
};
for (i=i; i<100 && i<=radc; i+=4) {		/* plot the surround */
   plot V[midc-i][1];
};

for (i=0; i<hzmaxa; i++) {			/* plot center row of HzA's */
   plot V[mida+i][soma];
};
for (i=0; i<hzmaxb; i++) {			/* plot center row of HzB's */
   plot V[midb+i][soma];
};

endexp = stimtime + .07;
synaptau = .01;
step stimtime;
synaptau = 1.0;
run;
