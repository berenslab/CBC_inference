//biophysical properties for GC and SBAC, including Ca-channel properties
//this file first used with ds5b.n


/*  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  */

//Ca-channel parameters
if (notinit(catyp)) catyp = 5;   // 3-> Markov T-type Ca chan; 1-> Markov L-type
if (notinit(ta)) ta = 1;			// default taua value
if (notinit(tb)) tb = 1;			// default taub value
if (notinit(tc)) tc = 1;			// default tauc value
if (notinit(td)) td = 1;			// default taud value
//numchan = 5;		// number of channels
//caunitL = 13e-12;	// conductance per channel (in Siemens)
//cacondpercm2 = .5e-3;		
if(notinit(cavoff)) cavoff=-0.004;	//default for Q-type
alpha=1;
beta=2;

/*  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  */

func camfunc(v, f)
{ local val,x,y;
  
  if (f==alpha) {				      /* alpha c */
    y = -.09 * (v - 63 );	  //fits catyp 3,5 to Sather etal(1993) data
    x = exp (y) - 1;
    if (abs(x) > 1e-5)                        /* singularity at v = -15 mv */
       val =  y / x
    else
       val = 1.0;
    val *= 3714.;		
  }
  else if (f==beta) {                              /* beta c */
    val = (exp ((v - 28 ) / -25.)); //fits catyp 3,5 to Sather etal(1993) data
    val *= 2;
  };	
  return (val*5);	
};
/*----------------------------------------*/

func cahfunc(v, f)
/* Calculate alphach, betach as a function of mV for  */
/* channel types 2 or 3 (HH or Markov T-type). */

{
   local val,x,y;

  if (f==alpha) {				      /* alpha h */
    val = (exp ((v - -20) / -9.));	//fits catyp 5 to Sather etal(1993) data
    val *= .36;
  }
  else if (f==beta) {                             /* beta h */
    y = 0.05 * (v - -20);		//fits catyp 5 to Sather etal(1993) data
    x = exp (y) - 1.;
    if (abs(x) > 1e-5)                        /* singularity */
       val = y / x
    else
       val = 1.0; 
    val *= 52/60;
    //val *= 1 - 1 / (1 + ( exp ((v- -50) / -25.)));  //prevent val from rising
						      // too high (limit inact)
  };
  return (val);
};

/*  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  */

func calcca0m = camfunc;	//use camfunc to encode any channel type function
func calcca1m = camfunc;
func calcca2m = camfunc;
func calcca2h = cahfunc;
func calcca3m = camfunc;
func calcca3h = cahfunc;
func calcca5m = camfunc;
func calcca5h = cahfunc;

/*--------------------------------------------------------*/

  func qcond (cond) 
    /* convert from "density" S/cm2 to "ndensity" N/um2 at 22 deg C. */
    /*  Unitary conductances are defined at 22 deg C. */
  {
   return (1e8 * cond);
  };

/*--------------------------------------------------------*/

/* gcseg.n */

/* Creates ganglion cell cable segments and membrane channels. */

if (notinit(ttx))                   ttx = 0;
if (notinit(Chnoise))           Chnoise = 0;


if (notinit(gcdensfile)) {
   gcdensfile = "gcdens.n";
   printf ("#\n");
   printf ("#   dsseg.n: using channel densities for gc from '%s'.\n",
			gcdensfile);
 };

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

if (make_gc)
   include (gcdensfile);	/* define channel densities */

if (make_gc)
{

ratio_k=1;

dpnak = 0;
dpkna = 0;

  if (ratio_k==1) 
  {   /* use ratios for Ka and Kdr where not already specified */

    if (notinit(ratio_kdr)) ratio_kdr = 0.25;
    if (notinit(ratio_ka))  ratio_ka  = 0.4;
    if (notinit(ratio_sk1)) ratio_sk1 = 0.001;
    if (notinit(ratio_sk2)) ratio_sk2 = 0.002;
    if (notinit(ratio_bk))  ratio_bk  = 0.005;

    if (notinit(ttx)) ttx = 0;

    for (region=0; region<nregions; region ++)
    {
		
		// switch off all channels
		// gcdens[NA] [region] =0;
		
      if (gcdens[KDR][region]==0)
          gcdens[KDR][region] = ratio_kdr * gcdens[NA] [region];
      if (gcdens[KA][region]==0)
          gcdens[KA][region]  = ratio_ka  * gcdens[NA][region];
      if ((region != AXON) && (region != AXON_LONG)) {
         if (gcdens[SKCA1][region]==0)
            gcdens[SKCA1][region]  = ratio_sk1  * gcdens[NA][region];
         if (gcdens[SKCA2][region]==0)
            gcdens[SKCA2][region]  = ratio_sk2  * gcdens[NA][region];
      };
      gcdens[NA][region] *= (1 - ttx);
    };
  };    

    /* When densities in sub-regions are zero, fill them in using
       from densities of neighboring regions.  This allows user
       to override densities for special cases.
       Extra sub-regions are not "extra parameters" since by default 
       they are a function of neighboring regions. */

  
  for (ch=0; ch<nchans; ch++) 
    { 
      if (gcdens[ch][DEND_PROX]==0)
         gcdens[ch][DEND_PROX] = (gcdens[ch][DEND] + gcdens[ch][SOMA]) * .5;
      if (gcdens[ch][AXON_LONG]==0)
         gcdens[ch][AXON_LONG] =  gcdens[ch][AXON];
    };

  gcdens[KA][AXON]      = 0.0;	/* never KA in axon */
  gcdens[KA][AXON_LONG] = 0.0;	

  if (!disp && memb_biophys) prden = 1
  else                       prden = 0;

  if (prden) 
    {
     printf ("#\n");
     printf ("#   Unitary channel conductances:\n"); 
     printf ("#\n");
     qc = exp(log(dqc)*(tempcel-dbasetc)/10)  * 1e12;
     printf ("#   %-5.3g pS   %s\n",dnau  * qc,chname[NA]);
     printf ("#   %-5.3g pS   %s\n",dcalu * qc,chname[CA]);
     printf ("#   %-5.3g pS   %s\n",dku   * qc,chname[KDR]);
     printf ("#   %-5.3g pS   %s\n",dkcasu* qc,chname[SKCA1]);
     printf ("#   %-5.3g pS   %s\n",dkcasu* qc,chname[SKCA2]);
     printf ("#   %-5.3g pS   %s\n",dkcabu* qc,chname[BKCA]);
     printf ("#   %-5.3g pS   %s\n",dkau  * qc,chname[KA]);
     printf ("#\n#\n");
     if (ratio_k) 
       {
         printf ("#   Setting K chans by ratio from Na density\n");
         printf ("# \n");
         printf ("#   ratio_kdr = %g\n", ratio_kdr);
         printf ("#   ratio_ka  = %g\n", ratio_ka);
         printf ("#   ratio_sk1 = %g\n", ratio_sk1);
         printf ("#   ratio_sk2 = %g\n", ratio_sk2);
         printf ("#   ratio_bk  = %g\n", ratio_bk);
       }; 
     printdens("mS/cm2",1000);
    };

/*---------------------------------------------*/

  
  for (region=0; region<nregions; region++)
    {
      gcdens[NA][region]  = gcdens[NA][region]  / qcond(dnau);
      gcdens[CA][region]  = gcdens[CA][region]  / qcond(dcalu);
      gcdens[KDR][region] = gcdens[KDR][region] / qcond(dku);
      gcdens[SKCA1][region] = gcdens[SKCA1][region] / qcond(dkcasu);
      gcdens[SKCA2][region] = gcdens[SKCA2][region] / qcond(dkcasu);
      gcdens[BKCA][region] = gcdens[BKCA][region] / qcond(dkcabu);
      gcdens[KA][region]   = gcdens[KA][region]  / qcond(dkau);
    };


  dfact=1;
  gcdens[KDR][AXON_THIN]    = dfact * gcdens[KDR][AXON_THIN];
  gcdens[KA] [AXON_THIN]    = dfact * gcdens[KA] [AXON_THIN];

  gcdens[KDR][HILLOCK] = dfact * gcdens[KDR][HILLOCK];
  gcdens[KA] [HILLOCK] = dfact * gcdens[KA] [HILLOCK];

  if (prden) printdens("N/um2",1);

};   /* if (make_gc) */
  
/*---------------------------------------------*/

  if (Chnoise==0) 
    {
     na_type    = 2;
     kdr_type   = 0;
     skca1_type = 4;
     skca2_type = 5;
     bkca_type  = 6;
     ka_type    = 2;
     ca_type    = 0;
    } 
  else 
    { 
     na_type   =  2;
     kdr_type   = 1;
     skca1_type = 4;
     skca2_type = 5;
     bkca_type  = 6;
     ka_type   =  3;
     ca_type   =  1;
    };


/*---------------------------------------------*/

/* Diameter of AXON_THIN region is set to "ath_dia" in anatfile.
   Then when read in, the value of ath_dia determines the
   diameter used.  the advantage of this is that we can test
   the effect of different diameters easily. */

taunk= 3.0;

gccapump_factor = 1e-2 * qcond(dcalu);
//factor calibrated to give good [Ca]i results for sb1:
//amcapump_factor = .27e-2 * qcond(dcatu);
//factor recalibrated to give good [Ca]i results for sb1 with ca channels:
amcapump_factor = .7e-2 * qcond(dcatu);

if (notinit(nshell)) nshell = 1;
//ddca = 1e-12;
ddca = 2e-6;

if (notinit(mvr_offsetm))  mvr_offsetm  = 0.010;
if (notinit(mvr_offseth))  mvr_offseth  = 0.012; // 0.015;
if (notinit(mvr_offsetkn)) mvr_offsetkn = 0.024;
mvr_offsetka_n =0.005;
mvr_offsetka_h =0.005;

if (notinit(na_ifactor)) na_ifactor = 0.0;
if (notinit(nanois))  nanois = 0;
if (notinit(sk1nois)) sk1nois = 0;
if (notinit(sk2nois)) sk2nois = 0;
if (notinit(bknois))  bknois  = 0;
if (notinit(kanois))  kanois  = 0;
if (notinit(kdrnois)) kdrnois = 0;
if (notinit(canois))  canois  = 0;

/*---------------------------------------------*/

proc make_gcseg(cellnr, nod1, nod2, d, region) /* proc to make dendrites */
{
  local x, y, z, dist, local_cplam;
  if (nod1 > nod2) {swap=nod1; nod1=nod2; nod2=swap;}; /* now: nod2 >=nod1 */

/* 
  if (region==SOMA)      printf("Soma       %g %g\n", nod1,nod2);
  if (region==HILLOCK)   printf("Hillock    %g %g\n", nod1,nod2);
  if (region==AXON_THIN) printf("Axon_thin: %g %g\n", nod1,nod2);
  if (region==AXON)      printf("Axon       %g %g\n", nod1,nod2);
*/

/*
  x = node [gc][cellnr][nod1]->xloc - node [gc][cellnr][nod2]->xloc;
  y = node [gc][cellnr][nod1]->yloc - node [gc][cellnr][nod2]->yloc;
  z = node [gc][cellnr][nod1]->zloc - node [gc][cellnr][nod2]->zloc;

  dist = sqrt (x*x + y*y);
*/
/*  printf("r:%g\n",dist /sqrt (x*x + y*y ) );   */

  if (region==HILLOCK || region==AXON_THIN) 	/* set fine comps in axon */
       local_cplam = .02
  else local_cplam = complam;

  if (region==DEND) { 		/* allow changing diameter in dendrites */
     d *= gc_dia_factor;
  };

   /* Reduce K offset in axon.  Problem is that with a large offset
      and without extra K chans, the axon tends to be too excitable.
      Check this with expt="spike_zone". */

/*  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  */

  if (!gc_biophys)  			/* no channels, passive membrane */
    {
     if (region == SOMA) at [gc][cellnr][nod1] sphere dia=d
				vrest=gcvstart elabl regname[region]
     else conn [gc][cellnr][nod1] to [gc][cellnr][nod2] cable dia=d
				vrest=gcvstart elabl regname[region];
    }
  else
  {

     if ((region == AXON) || (region==AXON_LONG))
       {
        xoffsetkn = mvr_offsetkn - .007;
       }
     else xoffsetkn = mvr_offsetkn;

     if (region == SOMA)
       {
  //	printf("Sphere nod1 %g \n",nod1);

          at [gc][cellnr][nod1] sphere dia d vrest=gcvstart elabl regname[region];

	  at [gc][cellnr][nod1] chan Na type na_type chnoise=nanois
		ndensity=gcdens[NA][region] * (1-na_ifactor)
		   offsetm=mvr_offsetm
		   offseth=mvr_offseth
		   ename nahh;

          at [gc][cellnr][nod1]
	   chan Na type na_type chnoise=nanois
		ndensity=gcdens[NA][region] * na_ifactor
		   offsetm=mvr_offsetm
		   offseth=mvr_offseth
		   tauc=30*.5 taud=30
		   ename naslo;

          at [gc][cellnr][nod1]
	   chan K type kdr_type chnoise=kdrnois
		ndensity=gcdens[KDR][region]
		   offset=mvr_offsetkn
		   taun=taunk
		   ename kdr;

          at [gc][cellnr][nod1]
	   chan KCa type skca1_type chnoise=sk1nois
		ndensity=gcdens[SKCA1][region]
		ename skca1;

          at [gc][cellnr][nod1]
	   chan KCa type skca2_type chnoise=sk2nois
		ndensity=gcdens[SKCA2][region]
		ename skca2;

          at [gc][cellnr][nod1]
	   chan KCa type bkca_type chnoise=bknois
		ndensity=gcdens[BKCA][region]
		offset = -.01
		ename bkca;

       	  at [gc][cellnr][nod1]
           chan K type ka_type chnoise=kanois
	       	ndensity=gcdens[KA][region]
		 	offsetm=mvr_offsetka_n
			offseth=mvr_offsetka_h
		ename ka;

	  at [gc][cellnr][nod1]
	    chan Ca type ca_type chnoise=canois
	        ndensity gcdens[CA][region]
		offset = -.005
	        capump vmax=gccapump_factor*gcdens[CA][region] km=5e-6
	        cshell=nshell
           	ename ca1;
       }
     else
       {
         conn [gc][cellnr][nod1] to [gc][cellnr][nod2]
	 cable dia d cplam=local_cplam vrest=gcvstart elabl regname[region]
	    chan Na type na_type chnoise=nanois
	        ndensity=gcdens[NA][region] * (1-na_ifactor)
       	        offsetm=mvr_offsetm
	        offseth=mvr_offseth

	    chan Na type na_type chnoise=nanois
	        ndensity=gcdens[NA][region] * na_ifactor
       	        offsetm=mvr_offsetm
	        offseth=mvr_offseth
	        tauc=30*.5 taud=30

	    chan Ca type ca_type chnoise=canois
	        ndensity=gcdens[CA][region]
	        capump vmax=gccapump_factor*gcdens[CA][region] km=5e-6
	        cshell=nshell

	    chan K type kdr_type chnoise=kdrnois
	        ndensity=gcdens[KDR][region]
	        offset=xoffsetkn
	        taun=taunk

	    chan KCa type skca1_type chnoise=sk1nois
                ndensity=gcdens[SKCA1][region]

	    chan KCa type skca2_type chnoise=sk2nois
                ndensity=gcdens[SKCA2][region]

	    chan KCa type bkca_type chnoise=bknois
                ndensity=gcdens[BKCA][region]

	    chan K type ka_type chnoise=kanois
                ndensity=gcdens[KA][region]
		offsetm=mvr_offsetka_n
		offseth=mvr_offsetka_h;
       }; /* if (region==SOMA) ... else */
  }; /*if (!gc_biophys) ... else */
};  /* proc make_gcseg */

/*--------------------------------------------------------*/

if (notinit(am_dia_factor)) am_dia_factor = 1.0;

if (notinit(amdensfile))
{
   amdensfile = "amdens.n";
   printf ("#   dsseg.n: using channel densities for am from '%s'.\n",
					amdensfile);
   printf ("#\n");
};

include (amdensfile);		/* define channel densities */

/* calibrate amndens[][] in chans/um2 */

dim amndens[nchans][nregions];

for (region=0; region<nregions; region++)
  {
     amndens[NA][region]    = amdens[NA][region]   / qcond(dnau);
     amndens[CA][region]    = amdens[CA][region]   / qcond(dcatu);
     amndens[KDR][region]   = amdens[KDR][region]  / qcond(dku);
     amndens[SKCA1][region] = amdens[SKCA1][region]/ qcond(dkcasu);
     amndens[SKCA2][region] = amdens[SKCA2][region]/ qcond(dkcasu);
     amndens[BKCA][region]  = amdens[BKCA][region] / qcond(dkcabu);
     amndens[KA][region]    = amdens[KA][region]   / qcond(dkau);
  };

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* proc to make segment of amacrine cell dendrite */

proc make_amseg(cellnr, nod1, nod2, d, segamrm, region)
      /* Note that nod1 is descendent node, and nod2 is parent */
{
  local x, y, z, local_cplam, densca;

  local_cplam=complam;	//lamda used for making comps, complam is default

  densca = amndens[CA][region];
  //sbac3 has more nodes -> reduce density to compensate -> equal # of Ca-chans
  //if (amacfile=="sbac3") densca = amndens[CA][region]/3;

  if (region==DEND || region==DEND_DIST)
    {
     d *= am_dia_factor;	/* allow changing diameter in dendrites */
    };

  /*  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  */

  if (!am_biophys)
    {
     if (region == SOMA)
           at [am][cellnr][nod1] sphere dia d vrev=amvrev rm=amsomrm
			vrest=amvstart elabl regname[region]
     else if (region == VARICOS)
           at [am][cellnr][nod1] sphere dia d vrev=amvrev rm=segamrm
			vrest=amvstart elabl regname[DEND]
     else conn [am][cellnr][nod1] to
	       [am][cellnr][nod2] cable  dia d vrev= amvrev rm=segamrm
				vrest=amvstart elabl regname[region];
    }
  else      			/* am_biophys */
    {
     offsetkn = mvr_offsetkn;

     if (region == SOMA)
       {

        at [am][cellnr][nod1] sphere dia d vrest=amvstart vrev=amvrev rm=amrm
	   elabl regname[region]
	   chan Na type na_type chnoise=nanois
		ndensity=amndens[NA][region] * (1-na_ifactor)
			offsetm=mvr_offsetm
			offseth=mvr_offseth
			ename nahh;

	  at [am][cellnr][nod1]
	   chan K type kdr_type chnoise=kdrnois
		ndensity=amndens[KDR][region] 
			offset=offsetkn 
			taun=taunk
			ename kdr;

	  at [am][cellnr][nod1]
	   chan K type ka_type chnoise=kanois
			ndensity=amndens[KA][region]
			offsetm=mvr_offsetka_n
			offseth=mvr_offsetka_h
			ename ka;      
    	  at [am][cellnr][nod1]
	    chan Ca type catyp
	         ndensity=amndens[CA][region]
	      	        offset=cavoff taua=ta taub=tb tauc=tc taud=td 
		        capump vmax=amcapump_factor*amndens[CA][region] km=5e-6
		  	//caexch kex=10e-9
	          	ename ca;			      
       }
     else if (region == VARICOS) 
       {
	at [am][cellnr][nod1]
	 cable dia d cplam=local_cplam vrest=amvstart vrev=amvrev rm=amrm
	   elabl regname[DEND]
	   chan Na type na_type chnoise=nanois
		ndensity=amndens[NA][region] * (1-na_ifactor)
			//offsetm=am_offsetm 
			//offseth=am_offseth
	   chan K type kdr_type chnoise=kdrnois
		ndensity=amndens[KDR][region] 
			//offset=am_offsetkn 
			taun=taunk
	   chan K type ka_type chnoise=kanois
		ndensity=amndens[KA][region]
			//offsetm=am_offsetka_n
			//offseth=am_offsetka_h
	   chan Ca type=catyp
	        ndensity=amndens[CA][region]
	      		offset=cavoff 
			taua=ta taub=tb tauc=tc taud=td 
		        capump vmax=amcapump_factor*amndens[CA][region] km=5e-6 ;
			//caexch kex=10e-9;	
       }
     else if (region == DEND_DIST || region == DEND)
       {
	//cells differ in # of nodes -> change density to compensate       
	conn [am][cellnr][nod1] to [am][cellnr][nod2]
	 cable dia d cplam=local_cplam vrest=amvstart vrev=amvrev rm=amrm
	   elabl regname[region]
	   chan Na type na_type chnoise=nanois
		ndensity=amndens[NA][region] * (1-na_ifactor)
			//offsetm=am_offsetm 
			//offseth=am_offseth
	   chan K type kdr_type chnoise=kdrnois
		ndensity=amndens[KDR][region] 
			//offset=am_offsetkn 
			taun=taunk
	   chan K type ka_type chnoise=kanois
		ndensity=amndens[KA][region]
			//offsetm=am_offsetka_n
			//offseth=am_offsetka_h
	   chan Ca type=catyp
	   	ndensity= densca
	      		offset=cavoff
			taua=ta taub=tb tauc=tc taud=td
		        capump vmax=amcapump_factor*amndens[CA][region] km=5e-7 ;
			//caexch kex=10e-9;
//fprintf(stderr,"nod 1: %g, nod2: %g ", nod1, nod2);
//fprintf (stderr, "ca comp: %g ",(node [am][1][nod1] -> cacomp));
//fprintf(stderr,"region: %g \n", region);       
       };
    };
};  /* proc make_amseg */

/*---------------------------------------------*/
