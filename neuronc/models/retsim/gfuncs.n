#! /usr/mont/bin/nc -v

/* Functions for constructing cells.  */

ptrace = 0;

/**********************************************/

func ff()

/* return fifty percent chance */

{
  return (rand() > 0.5);
};

/**********************************************/

func ffs()

/* return 1 or -1 with fifty percent chance */

{
  return ((rand() > 0.5) * 2 - 1);
};

/**********************************************/

func rrange (L, H)

/* return a number between L and H */

{
    local t;

  if (H < L) { 
      t = L;
      L = H; 
      H = t;
   };

  return ( L + rand() * (H - L) ); 
};

/**********************************************/

func rad_dist2 (celtyp, n, tnod, parent, stflag) 

/* Compute distance along dendrite back to cell body
   as the radial distance from the distal node to
   the soma.
*/

{
  return (n3dist ([celtyp][n][tnod], [celtyp][n][0]));
};

/**********************************************/

func rad_dist (celtyp, n, tnod, parent, stflag) 

/* Compute distance along dendrite back to cell body.
   Generate an exponentially decreasing diameter
   along dendrite.  Assumes that dendrites with lower
   node numbers are created first (closer to soma).
*/

{
  local i,diam,nconn,ncabl,nelem;
  local nod1, nod2, tracenode;
  local this_length, desc_length;

// printf ("rad_dist %g %g %g %g %g\n", celtyp,n,tnod,parent,stflag);

if (ptrace) print "rad_dist, node", celtyp, n, tnod, "parent", parent, "start", stflag;

  nconn = node [celtyp][n][tnod] -> numconn;
if (ptrace) print "node", tnod, "nconn", nconn, "parent", parent;

   if (tnod == 0) return 0;
   if (nconn <= 1 && !stflag) return 0;

   for (ncabl=0,i=1; i<=nconn; i++) {        /* Count the cable connections */
        nelem = node [celtyp][n][tnod] -> i;
	if (element nelem->ntype == ntype(cable)) ncabl++;
   };
   if (ptrace) print ncabl," cable connections.";

   for (i=1; i<=nconn; i++) {  /* Find the path back to soma */
        nelem = node [celtyp][n][tnod] -> i;
	if (element nelem->ntype != ntype(cable)) continue;
	if (ptrace) print "tracing conn", i;
        nod1=element nelem->node1c;
        nod2=element nelem->node2c;
        if (nod1 == parent || nod2 == parent)
           continue; 
        if (nod1 != tnod && nod2 == tnod) {
	   tracenode = nod1;
	}
	else {
	  if (nod2 != tnod && nod1 == tnod) {
	    tracenode = nod2;
	  }
	  else {
	   fprintf ("rad_dist: error, connection to node %g not found.\n",tnod);
	   return 0;
	  };
	};
	if (tracenode < 0) tracenode = 0;

	if (ptrace) print "tracenode", tracenode;

	this_length=element nelem->length;
if (ptrace)
  print "tracing element", nelem, "nodes", nod1, nod2, "length", this_length;

        if (tracenode==0) {
	   return this_length; 
	} 
	else {
	   if ((desc_length=rad_dist (celtyp, n, tracenode, tnod, 0)) != 0) {
if (ptrace) printf ("rad_dist returning with %g\n",desc_length);
		return (this_length + desc_length); 
	   };
	};

   }; /* for (i;;) */
   return 0; 
};

/*-----------------------------------------*/

func rad_dir (elnum, c1, c2, c3) 

/* Find which end of element is closest to center of cell,
   and return a 1 if it should be rotated. */

{
   local x1,y1,z1, x2,y2,z2;
   local n1a,n1b,n1c; 
   local n2a,n2b,n2c; 

  n1a = element elnum->node1a;
  n1b = element elnum->node1b;
  n1c = element elnum->node1c;

  n2a = element elnum->node2a;
  n2b = element elnum->node2b;
  n2c = element elnum->node2c;

  x1 = node [n1a][n1b][n1c] -> xloc;
  y1 = node [n1a][n1b][n1c] -> yloc;
  z1 = node [n1a][n1b][n1c] -> zloc;

  if (element elnum->ntype == ntype(cable)) {
     if (n3dist([n1a][n1b][n1c], [c1][c2][c3]) >
         n3dist([n2a][n2b][n2c], [c1][c2][c3]))
       return 1
       else return 0;
   }
  else return 0;

};

/*-----------------------------------------*/

func rad_diam (dist,diaspc,diabs)

{
  local diam;

  diam = exp (-dist/diaspc) * diabs;
  return diam;
};

/*-----------------------------------------*/

func taperden  (n1a,n1b,n1c,
		n2a,n2b,n2c,
		d1,d2,hrm,hrest,nden) {

/* Make a tapered dendrite starting at existing nodes 
   [n1a][n1b][n1c], [n2a][n2b][n2c], adding extra cable 
   segments if nodes are far apart.  Return the minor 
   node number of the newly created node.
*/

    local xrange,yrange,drange;
    local i,x1,y1,x2,y2,z1,z2;
    local dist,newdist,nlength;
    local nsegs,xincr,yincr,zincr,dincr;


 x1 = node [n1a][n1b][n1c] -> xloc;
 y1 = node [n1a][n1b][n1c] -> yloc;
 z1 = node [n1a][n1b][n1c] -> zloc;

 x2 = node [n2a][n2b][n2c] -> xloc;
 y2 = node [n2a][n2b][n2c] -> yloc;
 z2 = node [n2a][n2b][n2c] -> zloc;

 xrange = (x2-x1);
 yrange = (y2-y1);
 zrange = (z2-z1);

 nlength = sqrt (xrange*xrange + yrange*yrange);
 nsegs = int (nlength / 10) + 1;
 xincr = xrange / nsegs;
 yincr = yrange / nsegs;
 zincr = zrange / nsegs;

 drange = d1 - d2;

 if (nsegs > 2) dincr = drange / (nsegs-1)
 else           dincr = .1;

 if (ptrace) 
printf ("taperden: cable from node %g %g %g to %g %g %g dia %g\n\n",n1a,n1b,n1c,
							      n2a,n2b,n2c,d1);

/* conn [n1a][n1b][n1c] to [n2a][n2b][n2c] cable dia=d1 dia2=d2 rm=hrm vrest=hrest;

return nden;
*/


 if (nsegs==1) {
    conn [n1a][n1b][n1c] to 
         [n2a][n2b][n2c] 
          cable dia=d1 rm=hrm vrest=hrest;
 }
 else {					/* nsegs = 2 or more */

    conn [n1a][n1b][n1c] to 	/* starting segment */
         [n1a][n1b][nden+1] loc (x1+xincr, y1+yincr, z1+zincr) 
          cable dia=d1 rm=hrm vrest=hrest;

   for (i=1; i<nsegs-1; i++) {		/* middle segments */

    conn [n1a][n1b][nden+i] to 
         [n1a][n1b][nden+i+1] loc (x1+(i+1)*xincr, 
				   y1+(i+1)*yincr, 
				   z1+(i+1)*zincr)
          cable dia= d1-dincr*i rm=hrm vrest=hrest;
   };

    conn [n1a][n1b][nden+i] to 		/* ending segment */
         [n2a][n2b][n2c] 
          cable dia=d2 rm=hrm vrest=hrest;
 };

 return nden+nsegs-1;
};

/*-----------------------------------------*/

func taperdistden  (n1a,n1b,n1c,
		n2a,n2b,n2c, diabs, diaspc,
		hrm,hrest,nden) {

/* Make a tapered dendrite starting at existing nodes 
   [n1a][n1b][n1c], [n2a][n2b][n2c], adding extra cable 
   segments if nodes are far apart.  Return the minor 
   node number of the last newly created node.

   Diameters are calculated from distance back to the soma.
*/
    local xrange,yrange,drange;
    local x1,y1,x2,y2;
    local d1,d2;
    local dist,newdist,nlength;

 x1 = node [n1a][n1b][n1c] -> xloc;
 y1 = node [n1a][n1b][n1c] -> yloc;

 x2 = node [n2a][n2b][n2c] -> xloc;
 y2 = node [n2a][n2b][n2c] -> yloc;

 xrange = (x2-x1);
 yrange = (y2-y1);

 dist = rad_dist2 (n1a, n1b, n1c, n2c, 1);	/* find distance to soma */

 if (ptrace) printf ("taperdistden: node %g %g %g dist %g\n", n1a,n1b,n1c,dist);

 newdist = sqrt (xrange*xrange + yrange*yrange);

 d1 = rad_diam (dist,diaspc,diabs);
 d2 = rad_diam (newdist,diaspc,d1);

/*  return (taperden(n1a,n1b,n1c, n2a,n2b,n2c, d1,d2,hrm,hrest,nden)); */

 conn [n1a][n1b][n1c] to [n2a][n2b][n2c] cable dia=d1 dia2=d2
          rm=hrm vrest=hrest;

 return nden;
};

/*-----------------------------------------*/

func taperdia  (n1a,n1b,n1c, n2a,n2b,n2c, diabs, diaspc) {

/* Find diameter of far end of a tapered dendrite, given start
   diameter. Calculate from space constant. 
*/
    local xrange,yrange,drange; 
    local x1,y1,x2,y2; 
    local edia;
    local dist,newdist,nlength;

 x1 = node [n1a][n1b][n1c] -> xloc;
 y1 = node [n1a][n1b][n1c] -> yloc;

 x2 = node [n2a][n2b][n2c] -> xloc;
 y2 = node [n2a][n2b][n2c] -> yloc;

 xrange = (x2-x1);
 yrange = (y2-y1);

 dist = rad_dist2 (n1a, n1b, n1c, n2c, 1);	/* find distance to soma */

 if (ptrace) printf ("taperdistden: node %g %g %g dist %g\n", n1a,n1b,n1c,dist);

 newdist = sqrt (xrange*xrange + yrange*yrange);

 edia = rad_diam (newdist,diaspc,diabs);

 return (edia);
};


