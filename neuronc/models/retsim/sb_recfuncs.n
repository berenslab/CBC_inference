/* module sb_recfuncs.n */

/* Functions for setting up recording sites, plotting, in SB amac cell */

//sbnodes = celnode[sb][1]*2 + 1;     /* rough estimate of sb nodes */
sbnodes = 2000;
if (!notinit(nsb))     xnsb = nsb
else                   xnsb = 1;
if (!notinit(ndsgc)) xndsgc = ndsgc
else                 xndsgc = 1;

sb_dsconns = 5;         /* max nr of sb-dsgc synapses   */

dim cbpsb_synsa [xnsb+1][sbnodes];   /* cbp syns per sb node */
dim cbpsb_cbp_cn[xnsb+1][sbnodes];   /* celnum of presyn cbp, per sb node */
dim cbpdsgc_synsa [xndsgc+1][3300];  /* cbp syns per dsgc node */
dim cbpdsgc_cbp_cn[xndsgc+1][3300];  /* celnum of presyn cbp, per dsgc node */

/* for each dsgc cel, per nodnum save connected type,cel,nod numbers */

dim dsgc_in_syns[xndsgc+1][3300][3];
dim sb_out_syns[xnsb+1][sb_dsconns+1];   /* +1 to prevent error if n_sb=0 */

/* array holds dir of ds, cellnum of sb, nodenum on sb, dist to gccable */
/* make last dim one larger than required, to allow overflowing later */

dim sb_dsconn_dist[xnsb+1][sb_dsconns+1] = {{1e6}};
dim sb_dsconn_nodenrs[xnsb+1][sb_dsconns+1] = {{-1}};
dim dsgc_sbconn_nodenrs[xndsgc+1][sb_dsconns+1] = {{-1}};

/* - - - - - - - - - - - - - - - - - - - - - - - */

NDENDREC = 6;			/* max number of recording sites */
ndendrec = NDENDREC;

if (notinit (maxncelrec))	/* max number of cells to record from */
  MAXNCELREC = 5
else
  MAXNCELREC = maxncelrec;

NUMDEN    = 30;   			/* number of dendrites, set to max number */
BIGNEGVAL = -1e10;
BIGPOSVAL = 1e4;

dim recpoints[nceltypes][MAXNCELREC][NDENDREC] = {{-1}}; /* recording sites */

dim recpointsR[nceltypes][MAXNCELREC][NDENDREC] = {{-1}};/* sites for computeR*/

/* max V resp for stim */
dim  Vresponses[nceltypes][MAXNCELREC][NDENDREC] = {{BIGNEGVAL}};

/* max Ca responses */
dim Caresponses[nceltypes][MAXNCELREC][NDENDREC] = {{BIGNEGVAL}};

/* max current responses */
dim  iresponses[nceltypes][MAXNCELREC][NDENDREC] = {{BIGPOSVAL}};

/* max V resp / direction */
dim  Vmaxresp[2][nceltypes][MAXNCELREC][NDENDREC] = {{BIGNEGVAL}};

/* max Ca responses */
dim camaxresp[2][nceltypes][MAXNCELREC][NDENDREC] = {{BIGNEGVAL}};

/* max current responses */
dim  imaxresp[2][nceltypes][MAXNCELREC][NDENDREC] = {{BIGPOSVAL}};


/*  V value at time=0; */
dim  zerovals[nceltypes][MAXNCELREC][NDENDREC] = {{BIGPOSVAL}};

/* peaks for all rec points */
dim    Vpeaks[nceltypes][MAXNCELREC][NDENDREC] = {{BIGNEGVAL}};
dim     Vdips[nceltypes][MAXNCELREC][NDENDREC] = {{BIGPOSVAL}};

/* [Ca] peaks for all rec pnts */
dim   capeaks[nceltypes][MAXNCELREC][NDENDREC] = {{BIGNEGVAL}};

dim    cadips[nceltypes][MAXNCELREC][NDENDREC] = {{BIGPOSVAL}};

/* peaks and dips in current I */
dim    ipeaks[nceltypes][MAXNCELREC][NDENDREC] = {{BIGNEGVAL}};
dim     idips[nceltypes][MAXNCELREC][NDENDREC] = {{BIGPOSVAL}};

/* peaks in synaptic input */
dim inputpeaks[nceltypes][MAXNCELREC][NDENDREC]= {{BIGNEGVAL}};

/* time at peak voltage */
dim peakVtimes[nceltypes][MAXNCELREC][NDENDREC] = {{BIGNEGVAL}};

/* time at peak syn input */
dim peakinputtimes[nceltypes][MAXNCELREC][NDENDREC] = {{BIGNEGVAL}};

dim peakVtimesCFCP[2][nceltypes][MAXNCELREC][NDENDREC] = {{BIGNEGVAL}};
dim peakinputtimesCFCP[2][nceltypes][MAXNCELREC][NDENDREC] = {{BIGNEGVAL}};

/* - - - - - - - - - - - - - - - - - - - - - - - */

       CT = 0;
       CN = 1;
      NOD = 2;
    VPEAK = 3;
     VDIP = 4;
  T_VPEAK = 5;
   T_VDIP = 6;
    IPEAK = 7;
     IDIP = 8;
  T_IPEAK = 9;
   T_IDIP = 10;
   CAPEAK = 11;
   CADIP  = 12;
NRECPARS  = 13;

/* array to hold recording sites + associated values of measured params */
dim recpts[NDENDREC][NRECPARS] = {{-1}};

dim R [NUMDEN][NDENDREC];	/* array to hold all R-values computed */

DENFOUND  = 0;
RMIN      = 1;
RMAX      = 2;
MAXNOD    = 3;
NDENPARMS = 4;
dim denparms [NDENPARMS];	/* holds denfound,rmin,rmax,xdmaxnod  */
				/* (see func searchdend) */

NORANGE = 0;			/* =0 -> no range, proc must find one */
temp_angle=0;

if (notinit(rec_am_angle))  rec_am_angle  = 0;  /* angle of dendrite to rec */

func gs(parm) {};		/* defined in "synfuncs.n" */

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

proc conn_sbdsgc (prect,precn,postct,postcn)

{
   local n;
   local sbnod, dsgcnod;
   local ctindex, cnindex, nindex;
   local rcs;

  rcs  = getconn(prect,postct);         /* synapse type prect -> postct */
  if (dsconninfo>=1) {
    fprintf(stderr,"sb_dsconn_nodenrs[%g]:\n", precn);
    for(n=0;n<sb_dsconns;n++)
      fprintf(stderr,"  %g",sb_dsconn_nodenrs[precn][n]);
    fprintf(stderr,"\n");
  };

  for (n=0;n<sb_dsconns;n++) {
    ctindex=0;
    cnindex =1;
    nindex =2;

    sbnod   = sb_dsconn_nodenrs[precn][n];
    dsgcnod = dsgc_sbconn_nodenrs[postcn][n];

    if(sbnod!=-1 && dsgcnod!=-1) {

      conn [prect][precn][sbnod] to [postct][postcn][dsgcnod]
       synapse open expon=gs(SGAIN)
       maxcond=gs(SCOND)
       thresh=gs(STHRESH)
        nfilt1h=gs(SNFILTH)
        timec1h=gs(SDURH)
        hgain=gs(SHGAIN)
       vrev=gs(SVREV)
       vgain=1
       vesnoise=gs(SVNOISE)
       vsize  =gs(SVSIZ)
       nfilt2 =gs(SNFILT)
       timec2 =gs(SDUR)
       chnoise=gs(SCNOISE) unit=22e-12
       ename sb_out_syns[precn][n];    /* save unique identifier */
 
       dsgc_in_syns[postcn][dsgcnod][ctindex]=prect;
       dsgc_in_syns[postcn][dsgcnod][cnindex]=precn;
       dsgc_in_syns[postcn][dsgcnod][nindex] =sbnod;

       if (dsconninfo>=1)
         fprintf(stderr,
        "connections made: [%s][%g][%g] to [%g][%g][%g]; n=%g\n",
                cname[prect],precn,sbnod, postct,postcn,dsgcnod,n);
    };
  };  /* for (n;n<sb_dsconns;) */
};

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

func sbdsgc_conn(prect,precn,postct,postcn)

/* Call for 2 cells of known type, connect them according to specificity param. */
/* Prect is starburst, postct is dsgc. */
 
{
    local xsoma,ysoma, elemtyp, nn,x1,y1,dx,dy;
    local dsgcpref_deg, sb_denpref, lowbound, upbound;
    local dist, pn, n, q ,i;

 if (notinit(dsconn_gen)) dsconn_gen = .5;   /* 0=least, 1=most general conn */

 xsoma = node [prect][precn][soma] -> xloc;
 ysoma = node [prect][precn][soma] -> yloc;

 foreach cable ?c node[prect][precn] ?nn {

  elemtyp = element c -> elabl;

  if(nsb==0) nn=0;      /* if no starbursts, set nn to 0 */

  /* if sb dendrite is distal, and node has cbp associated with it */

  if (elemtyp=="dend_dist" && !notinit(cbpsb_synsa[precn][nn])) {

      x1 = node [prect][precn][nn] -> xloc;
      y1 = node [prect][precn][nn] -> yloc;

      dx = x1 - xsoma;
      dy = y1 - ysoma;
      sb_denpref = atanx(dx,dy)*DEG;    /* get sb node pref angle to soma */
      while (sb_denpref>180)            /* limit to range -180 to 180 deg */
        sb_denpref -= 360;

      dsgcpref_deg = dsgc_pref[postcn]; /* get dsgc preferred direction */
      while (dsgcpref_deg>180)          /* limit to range -180 to 180 deg */
        dsgcpref_deg-=360;

      //if (dsgcpref_deg<=45 && dsgcpref_deg>-45) dsgcdir = EAST
      //else if (dsgcpref_deg<=135 && dsgcpref_deg>45) dsgcdir = NORTH
      //else if (dsgcpref_deg<=-135 || dsgcpref_deg>135) dsgcdir = WEST
      //else if (dsgcpref_deg<=-45 && dsgcpref_deg>-135) dsgcdir = SOUTH;

      lowbound = dsgcpref_deg - dsconn_gen*180; /* compute angle range */
      upbound  = dsgcpref_deg + dsconn_gen*180;

     if (lowbound<=sb_denpref && sb_denpref<=upbound) {
       foreach cable ?c node [postct][postcn] ?dd within2d 10
                node [prect][precn][nn] {

        dist=e2dist([prect][precn][nn],c);

        if (dsconninfo>=2)
 fprintf(stderr,
"  sbdsgc_conn: node [%s][%g][%g]: dist=%g sbpref=%g dsgcpref=%g postcn=%g\n",
                        cname[prect],precn,nn,dist,sb_denpref,dsgcpref_deg,
                        precn,postcn);

    /* keep the closest distances in an ordered array: */
    /* shortest distance,closest node first */

        for (n=0;n<sb_dsconns;n++) {
          if (dist<sb_dsconn_dist[precn][n]) {
            for (i=sb_dsconns;i>n;i--) {          /* shift everything to right */
              sb_dsconn_dist[precn][i]=sb_dsconn_dist[precn][i-1];
              sb_dsconn_nodenrs[precn][i]=sb_dsconn_nodenrs[precn][i-1];
              dsgc_sbconn_nodenrs[postcn][i]=dsgc_sbconn_nodenrs[postcn][i-1];
            };
                                                      /* add in new values: */
            sb_dsconn_dist[precn][n]=dist;              /* dist */
            sb_dsconn_nodenrs[precn][n]=nn;             /* sb nodenr */
            dsgc_sbconn_nodenrs[postcn][n]=dd;  /* dsgc nodenr */

            count=0;
            for (i=0;i<sb_dsconns;i++) {                /* check for doubles */
              if (sb_dsconn_nodenrs[precn][i]==nn)
                count++;
                if (count>1) {   /* if found, erase by shifting array to left */

                 sb_dsconn_dist[precn][i]=sb_dsconn_dist[precn][i+1];
                 sb_dsconn_nodenrs[precn][i]=sb_dsconn_nodenrs[precn][i+1];
                 dsgc_sbconn_nodenrs[postcn][i]=dsgc_sbconn_nodenrs[postcn][i+1];
                };
             };

             if (dsconninfo>=2) {                       /* print out arrays */
                fprintf(stderr, "  array sb_dsconn_nodenrs:  \n");
                for (n=0;n<sb_dsconns;n++)
                  fprintf(stderr, "  %g", sb_dsconn_nodenrs[precn][n]);
                fprintf(stderr, "\n  array sb_dsconn_dist:  \n");
                for (n=0;n<sb_dsconns;n++)
                  fprintf(stderr, "  %-4.3g", sb_dsconn_dist[precn][n]);
                fprintf(stderr, "\n    sbdsgc_conn: sb[%g][%g] and dsgc[%g][%g]; dist=%g\n",
                                     precn,nn,postcn,dd,dist);
              };
              break;
            };
          };
        };
      };
    };
  };
  return 1;
};

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

proc save_cbp_syns (prect,precn,postct,postcn,hnod,synout)

{
 if (postct==sb) {
   if(nsb==0) hnod=0;		     /* for each sb node, save cbp synapse num */
   cbpsb_synsa[postcn][hnod] = synout; /* save cbp celnr per sb node */
   cbpsb_cbp_cn[postcn][hnod] = precn; /* save cbp celnr per dsgc node */
 }
 else if (postct==dsgc) {
   cbpdsgc_cbp_cn[postcn][hnod] = precn; 
 };

 /* fprintf(stderr,"cbpdsgc_cbp_cn[%g][%g] = %g \n",postcn,hnod,precn); /* */
};


/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

proc print_sb_out_syns()

{
    local q;

  fprintf(stderr,"retsim1: sb_out_syns:\n");
  for (i=1; i<=nsb; i++) {
    for (q=0;q<sb_dsconns;q++)
      fprintf(stderr," %g",sb_out_syns[i][q]);
    fprintf(stderr,"\n");
  };
};

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

proc display_sb_out_syns(i)

{
    local q;

  for (q=0;q<sb_dsconns;q++) {
    if(!notinit(sb_out_syns[i][q])) {
      if (info_disp>=1)
        fprintf(stderr,
            "retsim1: make_sb cel %g: sb_dsconns=%g q=%g synapse=%g\n",
                                    i, sb_dsconns,q,sb_out_syns[i][q]);

      display element sb_out_syns[i][q] color=white dscale 4;
    }
    else
      break;
  };
};

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

func searchdend(ct,cn,anglrad,dt)
		/* dt (searchrange), anglrad both in RAD-units! */
{
    local xsoma,ysoma,denfound1;
    local rmax,rmin;
    local anglmax,anglmin,d1,d2,d3;
//fprintf(stderr,"searchdend %g\n", dt);
  xsoma = node [ct][cn][0] -> xloc;  /* xsoma is the x-loc of node 0 (soma) */
  ysoma = node [ct][cn][0] -> yloc;

//fprintf(stderr,"searchdend ct%g cn%g\n", ct,cn);
  /* First look at nodes within most exact range of angles possible: */
  rmax = -1e10;
  rmin =  1e10;

  anglmax = anglrad + dt;	//in radians
  anglmin = anglrad - dt;

  foreach cable ?cbrnum node [ct][cn] ?cnod {
    xden  = node [ct][cn][cnod] -> xloc;
    yden  = node [ct][cn][cnod] -> yloc;
    dx = xden - xsoma; 		/* dist between den-node and soma */
    dy = yden - ysoma; 
    dangl = atanx(dx,dy);

    /* atanx gives angle in RAD: dy/dx is tan(angle), */
    /* so atan(dy/dx) gives that angle */

    r = sqrt(dx*dx+dy*dy);
    d1=dangl-anglmax;
    d2=dangl-anglmin;

    if (inrange(anglmin,anglmax,dangl)) {  /* dend must be in angle range */
      if (rmin > r)
        rmin = r; 		/* if r is smaller than rmin, change rmin */
      if (rmax < r) {
        rmax = r;		/* if r is bigger than rmax, change rmax */
        xdmaxnod = cnod;	/* that node then becomes the farthest node */
      };
    };
  };
  denfound1 = (rmax != -1);	/* denfound=1 when a dendrite is found */
  denparms[DENFOUND]=denfound1;
  denparms[RMIN]=rmin;
  denparms[RMAX]=rmax;
  denparms[MAXNOD]=xdmaxnod;
  return denfound1;
};

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

func findrecpts (ct, cn, angl, searchrange, ndendrc)

 /* Finds recording points and puts nodnrs in array "recpts".
    If it finds a SBAC dendrite within a certain range of angles,
       1) Get first node within radius range,
       2) Try to get node that receives connection from bipolar
           (for bp synapse recording).
        3) Assumes soma is node 0, and that its primary dendrites
            start at node 1.
 */
{
    local i, n, q, rmax, rmin, nborders;
    local dim nfound[NDENDREC]={{0}};	/* if recsite x found, nfound[x]=1 */
    local xden, yden, xsoma, ysoma;
    local dx,dy,dangl,nelem;
    local cbrnum, cnod, nod1, nod2, nconn;
    local xdmaxnod;
    local anglrad,anglmax, anglmin,dtexact;
    local recsitewidth, whigh, wlow;
    local denfound;

  anglrad = angl/DEG;
  dtexact = 2*PI/30;

  ndendrec = ndendrc;			/* set global variable */

  if (ndendrec > NDENDREC) ndendrec = NDENDREC;

  denfound=searchdend(ct,cn,anglrad,dtexact);/* look for dend at exact angle */

  //fprintf(stderr,"denfound: %g ct=%g (%s)\n", denfound, ct, cname[ct]);

  if (!denfound) {	/* if no dendrite found in the exact search */
    if(searchrange == NORANGE)	{	/* if no specific searchrange entered */
      denfound=searchdend(ct,cn,anglrad,2*PI/10);  /* expand search to 2PI/10 */
      if (!denfound) denfound=searchdend(ct,cn,anglrad,2*PI);/* expand to 2PI */
    }
    else {		/* if specific range entered, search only that range */
      dt = .5 * searchrange;
      denfound=searchdend(ct,cn,anglrad,dt);
    };
  };

  /* If a dendrite was found, follow through parent nodes to soma. */
  /* First initialise bounds for placing the recording sites, */

  if (denfound) {
    rmin=denparms[RMIN];
    rmax=denparms[RMAX];
    xdmaxnod=denparms[MAXNOD];
    xsoma = node [ct][cn][0] -> xloc;
    ysoma = node [ct][cn][0] -> yloc;
    xden  = node [ct][cn][xdmaxnod] -> xloc;
    yden  = node [ct][cn][xdmaxnod] -> yloc;
    dx = xden - xsoma;
    dy = yden - ysoma;

    /* Interval defined as:  space between sites / num of intervals needed */
    /* Because soma is always recsite, make max ndendrec-1 recsites on dend */

    recsitewidth= 1 / (ndendrec-1) * 0.3;/* width of recsite as fraction of dend length*/

    /* fprintf(stderr,"recsitewidth=%g\n", recsitewidth); /* */
    /* fprintf(stderr,"denfound=%g; rmin=%g; rmax=%g; xdmaxnod=%g\n", 
		denfound,rmin,rmax,xdmaxnod); /* */

    /* find angle (in deg) of farthest node and remember it in global var */

    temp_angle=atanx(dx,dy)*DEG;

    recpoints[ct][cn][0]=soma;		/* make soma first rec-point! */
    nfound[0]=1;			/* so first rec-point is always found */

    recpoints[ct][cn][ndendrec-1]=xdmaxnod;	/* make tip last rec-point! */
    nfound[ndendrec-1]=1;

    for (n=xdmaxnod; n != soma; n) {
      xden  = node [ct][cn][n] -> xloc;
      yden  = node [ct][cn][n] -> yloc;
      dx = xden - xsoma;
      dy = yden - ysoma;
      r = sqrt(dx*dx+dy*dy);

      for (q=1;q<ndendrec;q++) {
        whigh = (q/ndendrec + recsitewidth)*rmax;
        wlow  = (q/ndendrec - recsitewidth)*rmax;
        if (ct==sb) {

  if (!notinit(cbpsb_cbp_cn[cn][n]))
 /* fprintf(stderr, "cbpsb_cbp_cn[%g][%g]= %g lowbound=%g,r=%g,hibound=%g,nfound[%g]=%g\n",
       cn,n,cbpsb_cbp_cn[cn][n],wlow,r,whigh,q,nfound[q]);
/* */
	  if (!notinit(cbpsb_cbp_cn[cn][n]) && r>wlow && 
			r<=whigh && !nfound[q]) {

/*  fprintf(stderr, "cbpsb_cbp_cn[%g][%g]= %g lowbound=%g,r=%g,hibound=%g,nfound[%g]=%g\n",
       cn,n,cbpsb_cbp_cn[cn][n],wlow,r,whigh,q,nfound[q]);
/* */
	    recpoints[ct][cn][q] = n;
	    nfound[q] = 1;
	  };
	}
	else if (ct==dsgc) {
	  if (!notinit(cbpdsgc_cbp_cn[cn][n])) {

/* fprintf(stderr, "cbpdsgc_cbp_cn[%g][%g]= %g lowbound=%g,r=%g,hibound=%g,nfound[%g]=%g\n",
       cn,n,cbpdsgc_cbp_cn[cn][n],wlow,r,whigh,q,nfound[q]);
/* */

	    if (r>wlow && r<=whigh+0.001 && !nfound[q]) {
	      recpoints[ct][cn][q] = n;
	      nfound[q] = 1;

	   /* fprintf(stderr, "nfound[%g] = %g: recpoints[dsgc][%g][%g]=%g \n",
                  q, nfound[q],cn,q,recpoints[ct][cn][q]); /* */

            };
	  };
	};
      };

      nconn = node [ct][cn][n] -> numconn;
      //fprintf (stderr,"node = %g; nconn=%g\n",n,nconn);

      for (i=1; i<=nconn; i++) {  /* Find path back to soma */
        nelem = node [ct][cn][n] -> i;

        if (element nelem->ntype != ntype(cable))
	  continue;

	if (ninfo>2)
	  printf ("tracing from node %g conn %g\n",n,i);

	nod1=element nelem->node1c;	//nr of first node
        nod2=element nelem->node2c;	//nr of second node
	//fprintf (stderr,"nod1 %g nod2 %g n %g r %g\n",nod1,nod2,n,r);
        if (nod2 == n)
	  continue;        	/* descendent node */
        if (nod1 == n) {
	  n = nod2;        	/* follow parent node */
 	  break;
        };
      };  /* for (i;;) */

    //fprintf (stderr,"updated node = %g\n",n);
    }; /* for (n;;)   */
  }; /* if(denfound) */

  if(ninfo >= 2) {
    for (q=0;q<ndendrec;q++) {
        if (recpoints[ct][cn][q] >= 0)
	   at [ct][cn][recpoints[ct][cn][q]] recel dia 10;
	display recel matching [ct][cn][recpoints[ct][cn][q]] color q+1 dscale 1;
    };
    //if (disp) exit;
  };
  if (ninfo >= 3) {
    printf ("# sb_dend %g recording nodes:\n",dend);
    for (q=0;q<ndendrec;q++)
      printf ("%g; ", recpoints[ct][cn][q]);
  };

  if(notinit(addca)) addca = 0;
  addca = getn(sb,BIOPHYS);

  if (addca==2) //add ca-channel at one node only
    add_oneCachan();

  return denfound;

}; /* findrecpts */

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

func sb_distnode(cn)

/* Finds distal node in certain sb, using array recpoints,
   which, if made for sb, is ordered so that last node in array is most distal.
   Alternatively, user can specify node using DSloc (0=soma,1=next one,etc.).
*/

{
    local recnod,cellnr;

  if (notinit(DSloc))	{	/* unless node specified, get outermost node */
     for (recnod=ndendrec-1;recnod>=0;recnod--)
        {  if (recpoints[sb][cn][recnod]!=-1)  /* take the outermost rec-node */
   	   { if (addca)		   /* only take node w/Ca-compartment */
	       { if (node [sb][cn][recpoints[sb][cn][recnod]] -> cacomp)
                 break;
	       }
	     else
	       break;
	   };
        };
  }
  else if (addca) {	/* if addca, only accept DSloc node with Ca-comp */
    if (node [sb][cn][recpoints[sb][cn][DSloc]] -> cacomp)
       recnod=DSloc
     else {
	fprintf(stderr,
	   "# Func findnode error; for DSloc please select node with Ca-comp.");
        exit;
       };
  }
  else if (DSloc>=ndendrec || DSloc<0 || recpoints[sb][cn][DSloc]== -1) {
    fprintf (stderr,"# The node entered is not a valid rec-point.\n");
    fprintf (stderr,"# Please check func 'findnode()'.\n");
    fprintf (stderr,"# With DSloc enter range of 0 (=soma) - %g (distal)\n",
		ndendrec-1);
    exit;
  }
  else
    recnod=DSloc;

  return recnod;
};

/*------------------------ plot -----------------------------*/

proc plot_cbpsb_v(cn,n,vmin,vmax,siz)

/* display bipolar cell voltages presynaptic to sb number cn */

{
  local first, plg, offtr, offb, rec, s1, nbuf;

  plg   = vmax-vmin;	/* gain of trace */
  offtr = .0;		/* position of trace within graph */
  offb  = vmin;		/* trace offset base */
  if (siz<0) siz = 0.5;

  if (make_cbp_sb && script==0) {
    if (n==-1) {	/* if node = -1, show all bipolars connected to recpoints */
      for (rec=0;rec<ndendrec;rec++) {
        if (!notinit(cbpsb_synsa[cn][recpoints[sb][cn][rec]])) {
          sprintf (nbuf,"Vcbp_%g",recpoints[sb][cn][rec]);
	  plot V [cbp][cbpsb_cbp_cn[cn][recpoints[sb][cn][rec]]][soma] max (1-offtr)*plg+offb
	    	        min (0-offtr)*plg+offb
	    	        pen rec+1 plname nbuf plnum ndendrec+3 plsize 1;
        };
      };  /* for (rec;;) */
    }
    else if (!notinit(cbpsb_cbp_cn[cn][n])) {

      /* make string with input bipolar and receiving sb node */

      sprintf(s1,"Vcbp%g->sb%g_%g", cbpsb_cbp_cn[cn][n], cn, n);

      plot V [cbp][cbpsb_cbp_cn[cn][n]][soma] max (1-offtr)*plg+offb
		        min (0-offtr)*plg+offb
			plname s1 plnum ndendrec+3 plsize 1;
    };
  };  /* if (make_cbpsb) */
};

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

proc plot_cbpsb_rate(cn,n,maxvesrate,siz)

/* display bipolar cell vesicle release rate at synapses presynaptic to sb number cn */

{
  local first, plg, offtr, offb, rec, s1, nbuf;

  plg   = maxvesrate;		/* gain of trace */
  offtr = .0;		/* position of trace within graph */
  offb  = 0;		/* trace offset base */
  if (siz<0) siz = 0.5;

  if (make_cbp_sb && script==0) {
    if (n==-1) {	/* if node = -1, show all bipolars connected to recpoints */
      for (rec=0;rec<ndendrec;rec++) {
        if (!notinit(cbpsb_synsa[cn][recpoints[sb][cn][rec]])) {
          sprintf (nbuf,"Rcbp_%g",recpoints[sb][cn][rec]);
	  plot FA9 cbpsb_synsa[cn][recpoints[sb][cn][rec]] max (1-offtr)*plg+offb
	    	        min (0-offtr)*plg+offb
	    	        pen rec+1 plname nbuf plnum ndendrec+2 plsize siz;
        };
      };  /* for (rec;;) */
    }
    else if (!notinit(cbpsb_synsa[cn][n])) {

      /* make string with input bipolar and receiving sb node */

      sprintf(s1,"cbp%g->sb%g_%g", cbpsb_cbp_cn[cn][n], cn, n);

      plot FA9 cbpsb_synsa[cn][n] max (1-offtr)*plg+offb
		        min (0-offtr)*plg+offb
			plname s1 plnum ndendrec+2 plsize 1;
    };
  };  /* if (make_cbpsb) */
};

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

plotnum = 0;
if(notinit(plotsep)) plotsep=0;		/* put each trace in separate plot */

proc plot_v_recpnt(ct,cn,vmin,vmax,size)

/* Display voltage at dendritic sites in array recpoints */

{
    local q, plg, offtr, offb, recpt, name;

  if (script==0) {
    if(ct==dsgc || ct==gc)	/* plotnum sets where to put the plot */
				/* (lowest num = bottom) */
      plotnum+=1		/* put dsgc plot at bottom of display */
    else if(ct==sb)
      plotnum+=ndendrec+1
    else if(ct==cbp || ct==rbp)
      plotnum+=ndendrec+3
    else if (ct==xcone || ct ==xrod)
      plotnum+=ndendrec+4
    else plotnum+=ndendrec+5;
    if (size<0) size = 1;

    for (q=0;q<ndendrec;q++) {
      if (recpoints[ct][cn][q]>=0) {
        recpt=recpoints[ct][cn][q];
        sprintf(name,"V%s_%g_%g",cname[ct],cn,recpt);
        plot V[ct][cn][recpt] min vmin max vmax
				pen q+1 plname name plnum plotnum plsize=size;
	if(plotsep) plotnum++;	/* change number so each node has own plot */
      };
    };
    plg = 200;		/* gain of trace */
    offtr = .0;		/* position of trace within graph */
    offb  = 0;		/* trace offset base */
  };
};

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


proc defaultplots(vmin, vmax, maxvesrate, maxCa)

/* Sets the standard plots for most experiments */

{
   local ct,cn,siz;

  if (script==0 && !disp) {     //don't plot if running higher level script or -d
     plot_cbpsb_rate(1,-1,maxvesrate,0.3);
     if (!notinit(somaclamp)) plot_i_nod(ct=sb,cn=1,soma,-1e-10,1e-10,magenta,"",-1,siz=1);
     plot_ca_nod(ct=sb,cn=1,n=46,maxCa,cyan,"",-1,siz=0.2);
     plot_v_recpnt(sb,1,-0.08,-0.02,siz=0.5);
     //plot_v_nod(ct=sb,cn=1,soma,-0.08,-0.02,red,"Vsb",-1,siz=1);
  };
};

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

proc getresponses(ct,cn,fugorpet)
{
  local n,recnod;

  for (n=0;n<ndendrec;n++) {
    recnod=recpoints[ct][cn][n];
    if (recnod>=0) {
      if (stimtype=="sine" || stimtype=="sineann") {
          if (notinit(somaclamp))
            Vresponses[ct][cn][n] = Vpeaks[ct][cn][n] - Vdips[ct][cn][n]
          else
            iresponses[ct][cn][n] = ipeaks[ct][cn][n] - idips[ct][cn][n];
      }
      else
        Vresponses[ct][cn][n] = Vpeaks[ct][cn][n]-zerovals[ct][cn][n];

    // fprintf(stderr, "Vresponses[%g][%g][%g] = %g\n",ct,cn,n,Vresponses[ct][cn][n]);

      if (addca && (node[ct][cn][recnod]->cacomp)) {
        if (stimtype=="sine" || stimtype=="sineann")
           Caresponses[ct][cn][n] = capeaks[ct][cn][n]-cadips[ct][cn][n]
        else
            Caresponses[ct][cn][n] = capeaks[ct][cn][n] - dtcai;
      }
      else
        Caresponses[ct][cn][n] = -1;

      Vmaxresp[fugorpet][ct][cn][n] = Vresponses[ct][cn][n];
      peakVtimesCFCP[fugorpet][ct][cn][n] = peakVtimes[ct][cn][n];
      peakinputtimesCFCP[fugorpet][ct][cn][n] = peakinputtimes[ct][cn][n];
      camaxresp[fugorpet][ct][cn][n] = Caresponses[ct][cn][n];
      imaxresp[fugorpet][ct][cn][n] = iresponses[ct][cn][n];
    };
  };
};

  /* find sb cel and node to record from, find cell/node that connects to dsgc */

if (make_dsgc && make_sb) {
  if (notinit(sbreccel)) {
    for (n=1;n<=nsb;n++)
      if (sb_dsconn_nodenrs[n][0]>=0) { /* if elem 0 is neg, array is empty */
        sbreccel = n;                   /* if arr nonempty, use this cell */
        break;
      };
  };

  if (notinit(sbrecnod)) {
    if (sb_dsconn_nodenrs[sbreccel][0]>=0) /* if elem 0 is neg, array is empty */
      sbrecnod=sb_dsconn_nodenrs[sbreccel][0] /* just take elem 0 */
    else
     fprintf(stderr,"# retsim: sbreccel has no nodes connecting to the dsgc");
  };
};


/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

proc savecones()

/* save all cone voltages for later */

{
    local c;

  foreach cone ?c {

   if (!(element c->modify))
     modify c cone () save;
  };
};

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

proc restorcones()

/* restore all cone voltages */

{
    local c;

  foreach cone ?c {
   if (!(element c->modify))
     modify c cone () restore;
  };
};

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

/* Global variables to hold values found in onplot(). */

BIGNEGVAL = -1e10;
BIGPOSVAL = 1e4;

/* link numbers to varnames for use in func "getextr()": */

VOLT=1;
CALC=2;
CURR=3;
SYNIN=4;
PEAK=0;
DIP=1;

if (notinit(cadisptime)) cadisptime=0;    /* time for [Ca]i display    */

/*-------------------------------------------------------------------*/

proc getextr(ct,cn,Type,t1,t2,maxormin)

/* Find max or min V or [Ca] between two times at a node. */

{
    local recnode, n;
    local dim farval[NDENDREC]={{BIGNEGVAL}};
    local dim farcaval[NDENDREC]={{0}};
    local dim farival[NDENDREC]={{BIGNEGVAL}};
    local dim farsyninval[NDENDREC]={{BIGNEGVAL}};

  if (time<=0) {	/* (re)set all values before an experiment begins */
    for (n=0; n<NDENDREC; n++) {
      capeaks[ct][cn][n] = BIGNEGVAL;
      cadips[ct][cn][n] = BIGPOSVAL;
      Vpeaks[ct][cn][n] = BIGNEGVAL;
      Vdips[ct][cn][n]  = BIGPOSVAL;
      ipeaks[ct][cn][n] = BIGNEGVAL;
      idips[ct][cn][n]  = BIGPOSVAL;
      inputpeaks[ct][cn][n] = BIGNEGVAL;
      peakVtimes[ct][cn][n] = BIGNEGVAL;
      peakinputtimes[ct][cn][n] = BIGNEGVAL;
    };
  };

  if (time>0 && time<=ploti) {     /* store V at time=0, for every rec node */
    for (n=0; n<NDENDREC; n++)
      if (recpoints[ct][cn][n]>=0) 
		zerovals[ct][cn][n]=V[ct][cn][recpoints[ct][cn][n]];
  };

  if (time>t1 && time<t2) {
    for (n=0; n<ndendrec; n++)	{ /* get voltage extrema for all rec points */
      if (recpoints[ct][cn][n]>=0) {
        if (Type==VOLT) {	  	 /* assign which plot farval looks at */
	  farval[n] = V[ct][cn][recpoints[ct][cn][n]];

	  if (maxormin==PEAK) {  /*  find either voltage peak or dip: */
	    if (farval[n] > Vpeaks[ct][cn][n]) {
	      Vpeaks[ct][cn][n] = farval[n];
              peakVtimes[ct][cn][n] = time;
	    };
	  }
	  else if (maxormin==DIP) {
	    if (farval[n] < Vdips[ct][cn][n]) Vdips[ct][cn][n] = farval[n];
	  }
	  else
	    fprintf (stderr,"#6th arg of func getextr must be PEAK or DIP\n");
        }
        else if (Type==CALC) {		/* check for ca compart. */
          if (node[ct][cn][recpoints[ct][cn][n]] -> cacomp) { 
            farcaval[n] = Ca(1) [ct][cn][recpoints[ct][cn][n]];

	    if (maxormin==PEAK) {		/* find [Ca] peak or dip */
	      if (farcaval[n] > capeaks[ct][cn][n]) 
		capeaks[ct][cn][n] = farcaval[n];
            }
	    else if (maxormin==DIP) {
	      if (farcaval[n]<cadips[ct][cn][n]) cadips[ct][cn][n]=farcaval[n];
	    }
	    else
	      fprintf (stderr,"#6th arg of func getextr must be PEAK or DIP\n");

	  };	/* if Ca-compartment */
        }

        else if (Type==CURR) {		/* get extrema for currents */
	  farival[n] = I[ct][cn][recpoints[ct][cn][n]];

	  if (maxormin==PEAK) {		/*  find voltage peak or dip */
	    if (farival[n] > ipeaks[ct][cn][n]) ipeaks[ct][cn][n] = farival[n];
	  }
	  else if (maxormin==DIP) {
	    if (farival[n] < idips[ct][cn][n]) idips[ct][cn][n] = farival[n];
 	  }
	  else
	    fprintf (stderr,"#6th arg of func getextr must be PEAK or DIP\n");
        };

        if (Type==SYNIN) {	/* get extrema for synaptic inputs */
          if (!notinit(cbpsb_synsa[cn][recpoints[ct][cn][n]])) {
            farsyninval[n] = FA9 cbpsb_synsa[cn][recpoints[ct][cn][n]];

	    if (maxormin==PEAK) {
	      if (farsyninval[n] > inputpeaks[ct][cn][n]) {
                inputpeaks[ct][cn][n] = farsyninval[n];
                peakinputtimes[ct][cn][n] = time;
	      };
	    };
	  }; /* if cbpsb_synsa is initialised */
        }; /* Type SYNIN */
      }; /* if recpoints exist */
    }; /* forloop all recpoints */
  }; /* if within time window */
}; /* proc getextr */

/*----------------------------------------------------*/

proc sb_onplot()

{
     local ct,cn,recnod, n, t1, t2, peakCaval, resetdur;

   ct = sb; cn = 1;
   peakCaval = BIGNEGVAL;	/* [Ca] peak at certain time (cadisptime); */
   if (addca && disp && time >  cadisptime-0.0001 && time <= cadisptime)
   {
      //recnod=findnode();

      /* get [Ca] at cadisptime */

      peakCaval=5e-7;  //Ca(1)[ct][cn][recpoints[ct][cn][recnod]];
      //disp_ca(peakCaval);	/* show anatomy with [Ca]i colored */
   };

    /* times in in which to look at plot: */
   t1 = .015; 			/* start looking a bit after start of simulation */
   t2 = endexp;

    /* for sine stims, find min and max responses */
    if (expt=="sb_cc_sine"||expt=="sb_cc_sineann") {

     t1 = endexp - 1/stfreq;    	/* set t1 to look at last cycle only */

     getextr(ct,cn,VOLT,t1,t2,PEAK);
     getextr(ct,cn,VOLT,t1,t2,DIP);
     getextr(ct,cn,SYNIN,t1,t2,PEAK);

     if (!notinit(somaclamp)) {
       getextr(ct,cn,CURR,t1,t2,PEAK);
       getextr(ct,cn,CURR,t1,t2,DIP);
     };

     if (addca) {
       getextr(ct,cn,CALC,t1,t2,PEAK);
       getextr(ct,cn,CALC,t1,t2,DIP);
     };
   }
   else /* for all other stims, find only peak responses */
      getextr(ct,cn,VOLT,t1,t2,PEAK);

   if (addca)					/* find peak Ca level */
      getextr(ct,cn,CALC,t1,t2,PEAK);

//fprintf(stderr,"time=%g\n",time);

};

