/* module celseg.n */

/* Biophysical properties for makcel.n.  */
/* Creates cable segments and membrane channels. */

/*--------------------------------------------------------*/

func qcond (cond)

/* convert from "density" S/cm2 to "ndensity" N/um2 at 22 deg C. */
/*  Unitary conductances are defined at 22 deg C. */

{
   return (1e8 * cond);
};

/*--------------------------------------------------------*/

if (notinit(ttxbath))		ttxbath = 0;
if (notinit(ttxsoma))		ttxsoma = 0;
if (notinit(tea))		tea     = 0;
if (notinit(fourap))		fourap  = 0;
if (notinit(Chnoise))           Chnoise = 0;
if (notinit(nceltypes)) nceltypes = 0;

dim densfil[nceltypes];				/* density file filenames */
dim cdens[nchans][nregions];			/* temp array for density data */
dim celdens[nceltypes][nchans][nregions];	/* density data */
dim zerodens[nchans][nregions] = {{0}};		/* zero density file */
dim chval[nceltypes][nchans][nchrate];		/* channel offsets, rates */
dim chanunit[nchans] = {{0}};			/* channel unitary conductances */
dim chanelem[nceltypes][nchans];		/* channel element enames (soma only) */

/*--------------------------------------------------------*/

func setdensfile(ctype,filenam)

/* Set a channel density file name */

{
  return densfil[ctype] = filenam;
};

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

func getdens(ctype,chantyp,region)

/* Get a channel density value */

{
  return celdens[ctype][chantyp][region];
};

/*-------------------------------------------------*/

proc printdens (ct, label, nden)

{
   local ch, region;

  printf ("# \n");
  printf ("#   Channel densities for '%s' cell type (%s)\n",cname[ct],label);
  printf ("# \n");
  printf ("#   ");
  for (ch=0; ch<nregions; ch++)
    printf ("%-7s ",regname[ch]);

  printf ("\n");
  printf ("# \n");

  for (ch=0; ch<nchans; ch++) {
    printf ("#   ");
    for (region=0; region<nregions; region ++) {
      if (ch<=CA5) {   /* CA5 is last channel in table before pumps, membr params */
         if (nden) mult = 1
         else      mult = 1000 * qcond(chanunit[ch]);
	 printf ("%-8.4g ",celdens[ct][ch][region] * mult);
      }
      else
	printf ("%-8.4g ",celdens[ct][ch][region]);
    };
    printf (" %s\n",chname[ch]);
  };
  printf ("# \n");
};

/*--------------------------------------------------------*/

for (n=0; n<nceltypes; n++) { 			/* set default offsets, rates */
  for (ch=0; ch<nchans; ch++) {
    for (rt=0; rt<nchrate; rt++) {
      chval[n][ch][CHOFFM] = 0;
      chval[n][ch][CHOFFH] = 0;
      chval[n][ch][CHTAUA] = 1;
      chval[n][ch][CHTAUB] = 1;
      chval[n][ch][CHTAUC] = 1;
      chval[n][ch][CHTAUD] = 1;
    };
  };
};

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

for (r=0; r<nregions; r++) {    	/* set reasonable defaults */
  zerodens[CVSTART][r] = vcl;		/* for membrane properties */
  zerodens[CVREV][r]  = vcl;
  zerodens[CRM][r]    = drm;
};

/*---------------------------------------------------------*/

/* Find all the membrane property files. */
/* If any have not been defined, try to use the default file. */
/* If that is not found, use "zerodens[][]" which has zero   */
/* for all the channel densities. */

proc findceldens() 

{
  local ct;

 for (ct=xcone; ct<nceltypes; ct++) {
    local fname;

  /* density files from command line */

  if      ((ct==xcone)&& (!notinit(condensfile)))  fname = conedensfile 
  else if ((ct==xrod) && (!notinit(roddensfile)))  fname = roddensfile
  else if ((ct==hbat) && (!notinit(hbatdensfile))) fname = hbatdensfile
  else if ((ct==ha)   && (!notinit(hadensfile)))   fname = hadensfile
  else if ((ct==hb)   && (!notinit(hbdensfile)))   fname = hbdensfile
  else if ((ct==rbp)  && (!notinit(rbpdensfile)))  fname = rbpdensfile
  else if ((ct==cbp)  && (!notinit(cbpdensfile)))  fname = cbpdensfile
  else if ((ct==a17)  && (!notinit(a17densfile)))  fname = a17densfile
  else if ((ct==aii)  && (!notinit(aiidensfile)))  fname = aiidensfile
  else if ((ct==sb)   && (!notinit(sbdensfile)))   fname = sbdensfile
  else if ((ct==am)   && (!notinit(amddensfile)))  fname = amdensfile
  else if ((ct==gc)   && (!notinit(gcdensfile)))   fname = gcdensfile
  else if ((ct==dsgc) && (!notinit(dsgcdensfile))) fname = dsgcdensfile;

  if (notinit(fname)) fname = cname[ct]+"_dens.n";

  if (x=fopen(fname,"r")) {		 /* check for file with density data */
    fclose(x);
    densfil[ct] = fname;
  }
  else
  if (x=fopen(def_dens_file,"r")) {	/* otherwise use default file */
    fclose(x);
    densfil[ct] = def_dens_file;
  }
  else
    densfil[ct] = "";			 /* otherwise use zerodens */

  if (ninfo>=3)
    if (getn(ct,BIOPHYS)) {
      if (densfil[ct])
        printf ("#   celseg.n: %5s channel densities from '%s'.\n",
 	       cname[ct],densfil[ct])
      else
       printf ("#   celseg.n: %4s biophysics specified, but channel density file not present.\n");
    };
 };

 for (ct=0; ct<nceltypes; ct++) { 	/* read density files */
   if (!densfil[ct]) {
     cdens = zerodens;			/* default zero density */
     if (ninfo>=3) {
       printf ("# celseg.n, densities for '%s' not specified, using '%s'.\n",
 	       cname[ct],"zerodens");
     };
   }
   else {
     fread(densfil[ct],cdens,nrows,ncols);	/* read into temp arr */
     if (nrows!=nchans) {
       cdens = zerodens;			/* default zero density */
       if (ninfo>=3) {
         printf ("# celseg.n, can't find correct rows (%g) in %s,\n",
 							nrows,densfil[ct]);
         printf ("set densities for %s from '%s'.\n",
 		 cname[ct],"zerodens");
       };
     };
   };

   for (ch=0; ch<nchans; ch++) {		/* copy density data  */
     for (r=0; r<nregions; r++) {
       celdens[ct][ch][r] = cdens[ch][r];
     };
   };
 };

 if (ninfo>=3) printf ("\n");
};

/*---------------------------------------------------------*/

/* Format of param files for channels in cell's different regions (S/cm2): */

/* (Note that predefined variables can be set in file) */

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/*
# Example membrane properties (density) file
#
#dend dend_prox dend_dist soma  hillock  thin   axon    axon_long node
40e-3	0e-3	0e-3	93e-3	85e-3	80e-3	55e-3	0e-3   0e-3  # Na
0e-3    0e-3    0e-3    0e-3 	0e-3   	0e-3    0e-3  	0e-3   0e-3  # Na5
0e-3	0e-3  	0e-3 	0e-3    0e-3	0e-3	0e-3	0e-3   0e-3  # Na6
0e-3	0e-3  	0e-3 	0e-3    0e-3	0e-3	0e-3	0e-3   0e-3  # Na8
10e-3	0e-3	0e-3    10e-3   10e-3	10e-3	10e-3   0e-3   0e-3  # Kdr
5e-3 	0e-3	0e-3	10e-3	10e-3	10e-3	0e-3 	0e-3   0e-3  # KA
0e-3	0e-3	0e-3	0e-3	0e-3	0e-3	0e-3	0e-3   0e-3  # KIh
0.03e-3 0e-3  	0e-3	0.03e-3 0e-3	0e-3	0e-3	0e-3   0e-3  # sKCa1
0.05e-3 0e-3  	0e-3	0.05e-3 0e-3	0e-3	0e-3	0e-3   0e-3  # sKCa2
0.7e-3	0e-6	0e-3	0.7e-3	0e-6	0e-6	0e-6	0e-6   0e-3  # bKCa
0.2e-3	0e-3	0e-3	0.2e-3  0.2e-3	0e-3    0e-3	0e-3   0e-3  # Ca
0e-3	0e-3	0e-3	0e-3    0e-3	0e-3    0e-3	0e-3   0e-3  # Ca5
5e-6    0e-3    0e-3 	5e-6    5e-6	1e-12  	0e-3    0e-3   0e-3  # CAPUMP
dvs     dvs     dvs     dvs     dvs     dvs     dvs     dvs    dvs   # vstart
vcl     vcl     vcl  	vcl     vcl     vcl     vcl     vcl    vcl   # vrev
drm     drm     drm  	drm     drm     drm     drm     drm    drm   # Rm
dcm     dcm     dcm  	dcm     dcm     dcm     dcm     dcm    dcm   # Cm
#
# */

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

/* set channel unitary currents */

chanunit[NA]    = dnau;
chanunit[NA5]   = dnau;
chanunit[NA6]   = dnau;
chanunit[NA8]   = dnau;
chanunit[CA]    = dcalu;
chanunit[CA5]   = dcalu;
chanunit[KDR]   = dku;
chanunit[SKCA1] = dkcasu;
chanunit[SKCA2] = dkcasu;
chanunit[BKCA]  = dkcabu;
chanunit[KA]    = dkau;
chanunit[KH]    = dkau;

/* Note that if left zero, Kdr and KA densities and
    dend_prox and axon_long densities are automatically filled in.  */

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

ratio_k=1;	/* if K curr-dens = 0, use ratio to Na to compute curr dens */

dpnak = 0;	/* set Na-permeability of K channel to zero */
dpkna = 0;	/* set K-permeability of Na channel to zero */


if (notinit(ratio_kdr)) ratio_kdr = 0.25;
if (notinit(ratio_ka))  ratio_ka  = 0.4;
if (notinit(ratio_sk1)) ratio_sk1 = 0.001;
if (notinit(ratio_sk2)) ratio_sk2 = 0.002;
if (notinit(ratio_bk))  ratio_bk  = 0.005;

/* Set up channel densities for all cell types */


proc modchandens()

/* modify channel densities */

{
   local ct;

 for (ct=0; ct<nceltypes; ct++) {

   /* possibly modify channel densities */

  if (getn(ct,RATIOK)==1) {

    /* use ratios for Ka and Kdr where not already specified */

      for (region=0; region<nregions; region ++) {

        if (celdens[ct][KDR][region]==0)
            celdens[ct][KDR][region] = ratio_kdr * celdens[ct][NA] [region];
        if (celdens[ct][KA][region]==0)
            celdens[ct][KA][region]  = ratio_ka  * celdens[ct][NA][region];
        if ((region != AXON) && (region != AXON_LONG)) {
          if (celdens[ct][SKCA1][region]==0)
              celdens[ct][SKCA1][region]  = ratio_sk1  * celdens[ct][NA][region];
          if (celdens[ct][SKCA2][region]==0)
              celdens[ct][SKCA2][region]  = ratio_sk2  * celdens[ct][NA][region];
        };
      };  /* region */
    }; /* ratiok == 1 */

 /* possibly block channels */

    for (region=0; region<nregions; region ++) {

	 celdens[ct][NA][region]  *= (1 - ttxbath);
       if (region==SOMA) 
         celdens[ct][NA][region]  *= (1 - ttxsoma);

       celdens[ct][KDR][region] *= (1 - tea);
       celdens[ct][KA][region]  *= (1 - fourap);
    };

/* When densities in sub-regions are zero, fill them in using
    densities of neighboring regions.  This allows user
    to override densities for special cases.
    Extra sub-regions are not "extra parameters" since by default
    they are a function of neighboring regions. 
*/

    for (ch=0; ch<nchans; ch++) {
      if (ch<=CA5) {   			/* CA5 is last channel in table */
        if (celdens[ct][ch][DEND_PROX]==0)
            celdens[ct][ch][DEND_PROX] = (celdens[ct][ch][DEND] +
					celdens[ct][ch][SOMA]) * .5;
        if (celdens[ct][ch][AXON_LONG]==0)
            celdens[ct][ch][AXON_LONG] =  celdens[ct][ch][AXON];
      };
    };

    /* allow overriding some K densities in initial segment */

    dfact=1;
    celdens[ct][KDR][AXON_THIN]    = dfact * celdens[ct][KDR][AXON_THIN];
    celdens[ct][KA] [AXON_THIN]    = dfact * celdens[ct][KA] [AXON_THIN];
    celdens[ct][KH][AXON_THIN]     = dfact * celdens[ct][KH] [AXON_THIN];

    celdens[ct][KDR][HILLOCK] = dfact * celdens[ct][KDR][HILLOCK];
    celdens[ct][KA] [HILLOCK] = dfact * celdens[ct][KA] [HILLOCK];
    celdens[ct][KH][HILLOCK]  = dfact * celdens[ct][KH] [HILLOCK];

   /* Finally, convert to ndensity (n/um2) from mS/cm2 */

    for (region=0; region<nregions; region++) {
     for (ch=0; ch<nchans; ch++) 
       if (ch<=CA5) {   			/* CA is last channel in table */
	 qc = qcond(chanunit[ch]);
	 if (qc > 0) 
           celdens[ct][ch][region] = celdens[ct][ch][region] / qc;
       };
    };


  }; /* for (ct;;)  possibly modify channel densities */

}; /* modchandens */

/* - - - - - - - - - - - - - - - - - - - - - - - - - - */

proc setchandens()

{
  findceldens();
  modchandens();
};

/*------------------------------------------------------*/


proc printchaninfo() {

   local ndens, prden;

  for (ct=0; ct<nceltypes; ct++) {

    prden =  (info_chan) && !disp && getn(ct,BIOPHYS) && getn(ct,MAKE);

    if (prden) {
      printf ("#\n");
      printf ("#   Unitary channel conductances:\n");
      printf ("#\n");
      qc = exp(log(dqc)*(tempcel-dbasetc)/10)  * 1e12;
      printf ("#   %-5.3g pS   %s\n",dnau  * qc,chname[NA]);
      printf ("#   %-5.3g pS   %s\n",dnau  * qc,chname[NA5]);
      printf ("#   %-5.3g pS   %s\n",dnau  * qc,chname[NA6]);
      printf ("#   %-5.3g pS   %s\n",dnau  * qc,chname[NA8]);
      printf ("#   %-5.3g pS   %s\n",dku   * qc,chname[KDR]);
      printf ("#   %-5.3g pS   %s\n",dkau  * qc,chname[KA]);
      printf ("#   %-5.3g pS   %s\n",dkihu * qc,chname[KH]);
      printf ("#   %-5.3g pS   %s\n",dkcasu* qc,chname[SKCA1]);
      printf ("#   %-5.3g pS   %s\n",dkcasu* qc,chname[SKCA2]);
      printf ("#   %-5.3g pS   %s\n",dkcabu* qc,chname[BKCA]);
      printf ("#   %-5.3g pS   %s\n",dcalu * qc,chname[CA]);
      printf ("#   %-5.3g pS   %s\n",dcalu * qc,chname[CA5]);
      printf ("#\n#\n");
      if (getn(ct,RATIOK)==1) {
        printf ("#   Setting K chans for '%s' by ratio from Na density\n", cname[ct]);
        printf ("# \n");
        printf ("#   ratio_kdr = %g\n", ratio_kdr);
        printf ("#   ratio_ka  = %g\n", ratio_ka);
        printf ("#   ratio_sk1 = %g\n", ratio_sk1);
        printf ("#   ratio_sk2 = %g\n", ratio_sk2);
        printf ("#   ratio_bk  = %g\n", ratio_bk);
      };
      printdens(ct,"mS/cm2",ndens=0);
      printdens(ct,"N/um2",ndens=1);
    };
  }; /* for (ct;;) */
};   /* proc printchaninfo */

/*---------------------------------------------*/

  if (Chnoise==0)
    {
     na_type    = 2;
     na5_type   = 5;
     na6_type   = 6;
     na8_type   = 8;
     kdr_type   = 1;
     kih_type	= 4;
     skca1_type = 4;
     skca2_type = 5;
     bkca_type  = 6;
     ka_type    = 2;
     ca_type    = 0;
     ca5_type   = 5;
    }
  else
    {
     na_type   =  2;
     na5_type  =  5;
     na6_type  =  6;
     na8_type  =  8;
     kdr_type  =  1;
     kih_type  =  4;
     skca1_type = 4;
     skca2_type = 5;
     bkca_type  = 6;
     ka_type   =  3;
     ca_type   =  1;
     ca5_type  =  5;
    };

include "celsegca.n";

/*---------------------------------------------*/

if (notinit(nshell)) nshell      = 1;
if (notinit(nshell_soma)) nshell_soma = 10;

ddca = 1e-10;
//ddca = 2e-6;

chval[gc][NA][CHOFFM]    = .001; 	//0.010;
chval[gc][NA][CHOFFH]    = .001;	//0.012;
chval[gc][NA][CHTAUC]	 = 1;
chval[gc][NA][CHTAUD]	 = 1;
chval[gc][KDR][CHOFFM]   = 0.022;
chval[gc][KDR][CHTAUA]   = 2.5;
chval[gc][KA][CHOFFM]    = 0.01;	//0.005;
chval[gc][KA][CHOFFH]    = 0.01;	//0.005;
chval[gc][KH][CHOFFM]    = 0.01;
chval[gc][KH][CHOFFH]    = 0.01;
chval[gc][KH][CHTAUA]    = 1.5;
chval[gc][NA5][CHTAUC] = 150;
chval[gc][NA5][CHTAUD] = 300;
chval[gc][BKCA][CHOFFM]  = -0.06;
chval[gc][CA][CHOFFM]    = -0.005;
chval[gc][CA][CHOFFH]    = -0.005;

chval[sb][NA][CHOFFM]    = .005;	//0.010;
chval[sb][NA][CHOFFH]    = .005;	//0.012;
chval[sb][KDR][CHOFFM]   = 0.024;	//0.024;
chval[sb][KDR][CHTAUA]   = 2.0;	//3.0;
chval[sb][CA][CHOFFM]    = -0.002;
chval[sb][CA][CHOFFH]    = -0.002;
chval[sb][CA5][CHOFFM]    = -0.005;
chval[sb][CA5][CHOFFH]    = -0.005;

chval[dsgc][NA][CHOFFM]    = .001;	//0.010;
chval[dsgc][NA][CHOFFH]    = .001;	//0.012;
chval[dsgc][NA][CHTAUC]	   = 1;
chval[dsgc][NA][CHTAUD]	   = 1;
chval[dsgc][KDR][CHOFFM]   = 0.025;	//0.024;
chval[dsgc][KDR][CHTAUA]   = 2.5;	//3.0;
chval[dsgc][KA][CHOFFM]    = 0.01;	//0.005;
chval[dsgc][KA][CHOFFH]    = 0.01;	//0.005;
chval[dsgc][KH][CHOFFM]    = -0.012;
chval[dsgc][KH][CHOFFH]    = -0.012;
chval[dsgc][KH][CHTAUA]    = .6;		//10 gives acceptable results..
chval[dsgc][NA5][CHTAUC] = 150;
chval[dsgc][NA5][CHTAUD] = 300;
chval[dsgc][NA8][CHTAUC] = 150;
chval[dsgc][NA8][CHTAUD] = 300;
chval[dsgc][BKCA][CHOFFM]  = -0.01;
chval[dsgc][BKCA][CHTAUA]   = 1;
chval[dsgc][CA][CHOFFM]    = -0.005;
chval[dsgc][CA][CHOFFH]    = -0.005;

if (notinit(nanois))    nanois = 0;
if (notinit(na5nois))  na5nois = 0;
if (notinit(na6nois))  na6nois = 0;
if (notinit(na8nois))  na8nois = 0;
if (notinit(kdrnois))  kdrnois = 0;
if (notinit(kanois))   kanois  = 0;
if (notinit(kihnois))  kihnois = 0;
if (notinit(sk1nois))  sk1nois = 0;
if (notinit(sk2nois))  sk2nois = 0;
if (notinit(bknois))   bknois  = 0;
if (notinit(canois))   canois  = 0;

/*----------------------------------------------------------------*/

if (notinit(dia_min_factor))
  dia_min_factor = 0; 		/* factor for minimum diam */

if (notinit(dend_dia_factor))
  dend_dia_factor = 1; 		/* factor for diam of dends */

if (notinit(ax_dia_factor))
  ax_dia_factor = 1; 		/* factor for diam of axons */

/*  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  */

proc make_celseg(ct, cn, nod1, nod2, cd1, cd2, region)

/* proc to make dendrites; nod1 = descendent node, nod2 = parent node*/

{
    local x, y, z, dist, local_cplam;
    local vstart, cvrev, crm;

  if (ninfo>=5) fprintf(stderr,"# Make_celseg: nod1 %g nod2 %g\n", nod1, nod2);

  //if (nod1 < nod2) {swap=nod1; nod1=nod2; nod2=swap;}; /* now: nod2 <=nod1 */
  // if (ninfo >=5) fprintf(stderr,"Make_celseg after swap: nod1 %g nod2 %g\n", nod1, nod2);

/*
  if (region==SOMA)      printf("Soma       %g %g\n", nod1,nod2);
  if (region==DEND)      printf("Dend       %g %g\n", nod1,nod2);
  if (region==HILLOCK)   printf("Hillock    %g %g\n", nod1,nod2);
  if (region==AXON_THIN) printf("Axon_thin: %g %g\n", nod1,nod2);
  if (region==AXON)      printf("Axon       %g %g\n", nod1,nod2);
  if (region==AXON_LONG) printf("Axon_long  %g %g\n", nod1,nod2);
 /* */

/*
  x = node [ct][cn][nod1]->xloc - node [gc][cn][nod2]->xloc;
  y = node [ct][cn][nod1]->yloc - node [gc][cn][nod2]->yloc;
  z = node [ct][cn][nod1]->zloc - node [gc][cn][nod2]->zloc;
  dist = sqrt (x*x + y*y);
  printf("r:%g\n",dist /sqrt (x*x + y*y ) );
*/

  if (cd2==0) cd2 = cd1;	/* set default no taper */

  if (cd1 < dia_min_factor) cd1 = dia_min_factor;
  if (cd2 < dia_min_factor) cd2 = dia_min_factor;

  if (region==HILLOCK || region==AXON_THIN) 	/* set fine comps in axon */
       local_cplam = .02
  else local_cplam = getn(ct,COMPLAM);
  if (local_cplam == 0) local_cplam = complam;

 /* allow changing diameter in dendrites */

  if (region==DEND || region==DEND_PROX || region==DEND_DIST) {
     cd1 *= dend_dia_factor;
     cd2 *= dend_dia_factor;
  };
 				/* allow changing diameter in axon */

  if (region==AXON || region==AXON_LONG || region==HILLOCK) {
     cd1 *= ax_dia_factor;
     cd2 *= ax_dia_factor;
  };

/*  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  */

  if (getn(ct,BIOPHYS)==0) {		/* no channels, passive membrane */

    vstart = getn(ct,VSTART);
    cvrev  = getn(ct,VREV);
    crm    = getn(ct,RM);

    if (ninfo >=5)
      fprintf(stderr, "# Make_celseg %s, biophys=%g;vstart=%g;vrev=%g;rm=%g\n",
                                  cname[ct], getn(ct,BIOPHYS), vstart, cvrev, crm);

    if ((region == SOMA) || (nod1==nod2))
      at [ct][cn][nod1] sphere dia=cd1 vrest=vstart vrev=cvrev rm=crm
				elabl regname[region]
    else
      conn [ct][cn][nod1] to [ct][cn][nod2] cable dia=cd1 dia2=cd2
		   cplam=local_cplam
		   vrest=vstart vrev=cvrev
			rm=crm elabl regname[region];
  }
  else {
    if (ninfo >=5)
      fprintf(stderr, "Make_celseg biophys %g region %s node %g %g %g\n",
                      getn(ct,BIOPHYS), regname[region], ct, cn, nod1);

    vstart = celdens[ct][CVSTART][region];
    cvrev  = celdens[ct][CVREV][region];
    crm    = celdens[ct][CRM][region];

    if (ninfo >=5)
      fprintf(stderr,"###vstart = %g cvrev %g crm %g\n", vstart,cvrev,crm);

   /* Reduce K offset in axon.  Problem is that with a large offset
      and without extra K chans, the axon tends to be too excitable.
      Check this with expt="spike_zone". */

    if ((region == AXON) || (region==AXON_LONG))
      xoffsetkn = chval[ct][KDR][CHOFFM] - .007
    else
      xoffsetkn = chval[ct][KDR][CHOFFM];

    if ((region == SOMA) || (nod1==nod2)) {
  //	printf("Sphere nod1 %g \n",nod1);

      at [ct][cn][nod1] sphere dia cd1 vrest=vstart vrev=cvrev rm=crm
					elabl regname[region];

      at [ct][cn][nod1] chan Na type na_type chnoise=nanois
		   ndensity=celdens[ct][NA][region]
		   offsetm=chval[ct][NA][CHOFFM]
		   offseth=chval[ct][NA][CHOFFH]
		   tauc=chval[ct][NA][CHTAUC]
		   taud=chval[ct][NA][CHTAUD]
		   ename chanelem[ct][NA];

      at [ct][cn][nod1] chan Na type na5_type chnoise=na5nois  /* slow recovery from inact Na */
		   ndensity=celdens[ct][NA5][region]
		   offsetm=chval[ct][NA][CHOFFM]
		   offseth=chval[ct][NA][CHOFFH]
		   tauc=chval[ct][NA5][CHTAUC]
		   taud=chval[ct][NA5][CHTAUD]
		   ename chanelem[ct][NA5];

      at [ct][cn][nod1] chan Na type na6_type chnoise=na6nois  /* recurrent Na */
		   ndensity=celdens[ct][NA6][region]
		   offsetm=chval[ct][NA][CHOFFM]
		   offseth=chval[ct][NA][CHOFFH]
		   tauc=chval[ct][NA5][CHTAUC]
		   taud=chval[ct][NA5][CHTAUD]
		   ename chanelem[ct][NA6];

      at [ct][cn][nod1] chan Na type na8_type chnoise=na8nois  /* recurrent Na */
		   ndensity=celdens[ct][NA8][region]
		   offsetm=chval[ct][NA][CHOFFM]
		   offseth=chval[ct][NA][CHOFFH]
		   tauc=chval[ct][NA8][CHTAUC]
		   taud=chval[ct][NA8][CHTAUD]
		   ename chanelem[ct][NA8];

      at [ct][cn][nod1] chan K type kdr_type chnoise=kdrnois
		   ndensity=celdens[ct][KDR][region]
		   offset = xoffsetkn
		   taun=chval[ct][KDR][CHTAUA]
		   ename chanelem[ct][KDR];

      at [ct][cn][nod1] chan K type ka_type chnoise=kanois
	       	   ndensity=celdens[ct][KA][region]
		   offsetm=chval[ct][KA][CHOFFM]
		   offseth=chval[ct][KA][CHOFFH]
		   ename chanelem[ct][KA];

      at [ct][cn][nod1] chan K type kih_type chnoise=kihnois
		   ndensity=celdens[ct][KH][region]
		   offsetm=chval[ct][KH][CHOFFM]
		   offseth=chval[ct][KH][CHOFFH]
		   taun=chval[ct][KH][CHTAUA]
		   ename chanelem[ct][KH];

      at [ct][cn][nod1] chan KCa type skca1_type chnoise=sk1nois
		   ndensity=celdens[ct][SKCA1][region]
		   ename chanelem[ct][SKCA1];

      at [ct][cn][nod1] chan KCa type skca2_type chnoise=sk2nois
		   ndensity=celdens[ct][SKCA2][region]
		   ename chanelem[ct][SKCA2];

      at [ct][cn][nod1] chan KCa type bkca_type chnoise=bknois
		   ndensity=celdens[ct][BKCA][region]
		   offset=chval[ct][BKCA][CHOFFM]
		   ename chanelem[ct][BKCA];

      at [ct][cn][nod1] chan Ca type ca_type chnoise=canois
	           ndensity celdens[ct][CA][region]
		   offsetm=chval[ct][CA][CHOFFM]
		   offseth=chval[ct][CA][CHOFFH]
           	   ename chanelem[ct][CA];

      at [ct][cn][nod1] chan Ca type ca5_type chnoise=canois
	           ndensity celdens[ct][CA5][region]
		   offsetm=chval[ct][CA5][CHOFFM]
		   offseth=chval[ct][CA5][CHOFFH]
           	   ename chanelem[ct][CA5];

      at [ct][cn][nod1] cacomp 
	           capump vmax=celdens[ct][CAPUMP][region] km=5e-6
	           caexch kex=celdens[ct][CAEXCH][region]
	           cshell=nshell_soma;

    }	/* if region is soma */

    else if (region == VARICOS) {

      at [ct][cn][nod1] sphere dia cd1 vrest=vstart vrev=cvrev rm=crm
		elabl regname[region]

      chan Na type na_type chnoise=nanois
	        ndensity=celdens[ct][NA][region]
		offsetm=chval[ct][NA][CHOFFM]
		offseth=chval[ct][NA][CHOFFH]

      chan Na type na5_type chnoise=na5nois
	        ndensity=celdens[ct][NA5][region]
		offsetm=chval[ct][NA][CHOFFM]
		offseth=chval[ct][NA][CHOFFH]
		tauc=chval[ct][NA5][CHTAUC]
		taud=chval[ct][NA5][CHTAUD]

      chan Na type na6_type chnoise=na6nois
	        ndensity=celdens[ct][NA6][region]
		offsetm=chval[ct][NA][CHOFFM]
		offseth=chval[ct][NA][CHOFFH]
		tauc=chval[ct][NA5][CHTAUC]
		taud=chval[ct][NA5][CHTAUD]

      chan Na type na8_type chnoise=na8nois
	        ndensity=celdens[ct][NA8][region]
		offsetm=chval[ct][NA][CHOFFM]
		offseth=chval[ct][NA][CHOFFH]
		tauc=chval[ct][NA8][CHTAUC]
		taud=chval[ct][NA8][CHTAUD]

      chan K type kdr_type chnoise=kdrnois
	        ndensity=celdens[ct][KDR][region]
		offset=xoffsetkn
		taun=chval[ct][KDR][CHTAUA]

      chan KCa type skca1_type chnoise=sk1nois
                ndensity=celdens[ct][SKCA1][region]

      chan KCa type skca2_type chnoise=sk2nois
                ndensity=celdens[ct][SKCA2][region]

      chan KCa type bkca_type chnoise=bknois
                ndensity=celdens[ct][BKCA][region]

      chan K type ka_type chnoise=kanois
                ndensity=celdens[ct][KA][region]
		offsetm=chval[ct][KA][CHOFFM]
		offseth=chval[ct][KA][CHOFFH]

      chan K type kih_type chnoise=kihnois
		ndensity=celdens[ct][KH][region]
		offsetm=chval[ct][KH][CHOFFM]
		offseth=chval[ct][KH][CHOFFH]
		taun=chval[ct][KH][CHTAUA]

      chan Ca type ca_type chnoise=canois
	        ndensity=celdens[ct][CA][region]
		offsetm=chval[ct][CA][CHOFFM]
		offseth=chval[ct][CA][CHOFFH]

                capump vmax=celdens[ct][CAPUMP][region] km=5e-6	
	        caexch kex=celdens[ct][CAEXCH][region]
	        cshell=nshell

      chan Ca type ca5_type chnoise=canois
	        ndensity=celdens[ct][CA5][region]
		offsetm=chval[ct][CA5][CHOFFM]
		offseth=chval[ct][CA5][CHOFFH]

                capump vmax=celdens[ct][CAPUMP][region] km=5e-6
	        caexch kex=celdens[ct][CAEXCH][region]
	        cshell=nshell;

    }      /* if region is varicosity */

    else { /* cable segment, dendrites or axon */

      if (ninfo >=5) {
        fprintf(stderr, "Make_celseg region is cable; conn nod1 %g %g %g to nod2 %g %g %g\n",
	                 ct, cn, nod1, ct, cn, nod2);
        fprintf(stderr, "local_cplam: %g complam: %g\n", local_cplam, complam);
        fprintf(stderr, "diameters: cd1=%g cd2=%g\n", cd1, cd2);
      };

      conn [ct][cn][nod1] to [ct][cn][nod2] cable dia=cd1 dia2=cd2
                cplam=local_cplam vrest=vstart vrev=cvrev rm=crm
	        elabl regname[region]

      chan Na type na_type chnoise=nanois
	        ndensity=celdens[ct][NA][region]
		offsetm=chval[ct][NA][CHOFFM]
		offseth=chval[ct][NA][CHOFFH]

      chan Na type na5_type chnoise=na5nois
	        ndensity=celdens[ct][NA5][region]
		offsetm=chval[ct][NA][CHOFFM]
		offseth=chval[ct][NA][CHOFFH]
		tauc=chval[ct][NA5][CHTAUC]
		taud=chval[ct][NA5][CHTAUD]

      chan Na type na6_type chnoise=na6nois
	        ndensity=celdens[ct][NA6][region]
		offsetm=chval[ct][NA][CHOFFM]
		offseth=chval[ct][NA][CHOFFH]
		tauc=chval[ct][NA5][CHTAUC]
		taud=chval[ct][NA5][CHTAUD]

      chan Na type na8_type chnoise=na8nois
	        ndensity=celdens[ct][NA8][region]
		offsetm=chval[ct][NA][CHOFFM]
		offseth=chval[ct][NA][CHOFFH]
		tauc=chval[ct][NA8][CHTAUC]
		taud=chval[ct][NA8][CHTAUD]

      chan Ca type ca_type chnoise=canois
	        ndensity=celdens[ct][CA][region]
		offsetm=chval[ct][CA][CHOFFM]
		offseth=chval[ct][CA][CHOFFH]

		/* make capump if Ca chan is defined */

		capump vmax=celdens[ct][CAPUMP][region] km=5e-6 
	        caexch kex=celdens[ct][CAEXCH][region]
	        cshell=nshell

      chan Ca type ca5_type chnoise=canois
	        ndensity=celdens[ct][CA5][region]
		offsetm=chval[ct][CA5][CHOFFM]
		offseth=chval[ct][CA5][CHOFFH]

		/* make capump if Ca chan is defined */

		capump vmax=celdens[ct][CAPUMP][region] km=5e-6
	        caexch kex=celdens[ct][CAEXCH][region]
	        cshell=nshell

      chan K type kdr_type chnoise=kdrnois
	        ndensity=celdens[ct][KDR][region]
		offset=xoffsetkn
		taun=chval[ct][KDR][CHTAUA]

      chan KCa type skca1_type chnoise=sk1nois
                ndensity=celdens[ct][SKCA1][region]

      chan KCa type skca2_type chnoise=sk2nois
                ndensity=celdens[ct][SKCA2][region]

      chan KCa type bkca_type chnoise=bknois
                ndensity=celdens[ct][BKCA][region]

      chan K type ka_type chnoise=kanois
                ndensity=celdens[ct][KA][region]
		offsetm=chval[ct][KA][CHOFFM]
		offseth=chval[ct][KA][CHOFFH]

      chan K type kih_type chnoise=kihnois
		ndensity=celdens[ct][KH][region]
		offsetm=chval[ct][KH][CHOFFM]
		offseth=chval[ct][KH][CHOFFH]
		taun=chval[ct][KH][CHTAUA];

    }; /* if region is cable */
  }; /*if biophys */
};  /* proc make_celseg */

/*--------------------------------------------------------*/
