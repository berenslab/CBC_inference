
/* module spike_plot.m */

/* Sets up a spike frequency plot that can be accessed by calling
   the "spike_plot()" procedure:

   plot_freq = 1;
   if (plot_freq) plot spike_plot max 500 min 0 Char 'o' size .01 vpen freq_color;
*/

/* Process intracellular voltage to find spike times, */
/* inter-spike intervals, and instantaneous spike */
/* frequencies. */

max_spike_plots = 5;

dim spikyet[max_spike_plots] = {{0, 0, 0, 0, 0}};
dim oldvh[max_spike_plots] = {{0, 0, 0, 0, 0}};
dim oldspiktim[max_spike_plots] = {{0, 0, 0, 0, 0}};
dim max_spike_rate[max_spike_plots] = {{0, 0, 0, 0, 0}};

dim spike_node_map[max_spike_plots] = {{-1, -1, -1, -1, -1}};
num_spike_nodes = 0;


spikthresh = -.04;

func freq_color (nplot, xval, yval) {
  if (yval > 5) retval = 15
  else if (yval > 20)  retval = 14
  else                 retval = 12;
  if (yval < 1) retval = -1;
  return (retval);
};

func add_spike_node(n)
{
  if (num_spike_nodes < sizeof(spike_node_map)) {
    spike_node_map[num_spike_nodes] = n;
    //fprintf(stderr, "# Added node %g to map with index %g\n", n, num_spike_nodes);
    num_spike_nodes++;
    return (num_spike_nodes - 1);
  } else {
    fprintf(stderr, "# Could not add spike node %g\n", n);
  };
  return -1;
};

func get_spike_node_index(n)
{ 
  for (i = 0; i < num_spike_nodes; i++) {
    if (spike_node_map[i] == n) {
      return i;
    };
  };
  return -1;
};

func get_max_spike_rate(n)
{
  local i;
  i = get_spike_node_index(n);
  if (i != -1) {
    return max_spike_rate[i];
  };
  return 0;
};

func spike_plot(nodenum, xtime)
/* calculate instantaneous frequency from inter-spike interval */
{
  local spikerate, spikint, spiktim;
  local vh, index;

  //fprintf(stderr, "#Plotting spikerate of node %g\n", nodenum);
  spikerate = 0;

  if (nodenum != -1) {
    spikerate = 0;
    index = get_spike_node_index(nodenum);
    if (index == -1) {
      index = add_spike_node(nodenum);
    };
    //fprintf(stderr, "#Got index for node %g as %g\n", nodenum, index);
    if (index > -1) {
      vh = (V[dsgc][1][nodenum] > spikthresh);
      if (vh && !oldvh[index]) {           /* spike here */
        spiktim = xtime;

        if (spikyet[index]) {
        
          spikint = spiktim - oldspiktim[index] + 1e-12;
          spikerate = 1 / spikint;
        } else {
          spikyet[index] = 1;
          spikerate = 0;
        };

        oldspiktim[index] = spiktim;
      }
      else { spikerate = 0; };
      oldvh[index] = vh;

      if (spikerate > max_spike_rate[index]) {
        max_spike_rate[index] = spikerate;
      };
    };    
  };
  
  
  return spikerate;
};


