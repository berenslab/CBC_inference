/* functions that generate stimuli */

PET = 0;	/* Stimulus directions */
FUG = 1;
BOTH = 2;

if (notinit(showstim)) showstim = FUG;          /* when to disp stim */
if (notinit(stimhalf)) stimhalf=0; /* ->1 for bars stimulate half cell */

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

func movebar(starttime, xcent, ycent, r1, r2, bwidth, theta)

/* Move bar from one X position to another across the neural circuit */
/*  Center of bar is (xcent,ycent), and r1,r2 are radial locations for moving it. */
/*  Orientation of bar is set by "theta". */

/*  Returns the time for the end of the stimulus --  */
/*  Useful for setting the time coordinate on the plot ("endexp"). */

/* Dependent on "velocity", and "sinten" */

/* Note that "t" as defined in this proc is not the simulation time -- */
/*  it is merely a local variable used to set the starting time  */
/*  for the stimulus. */

{
         local xbar, ybar, t, rstep, bardur;
	 local coso, sino;

  rstep = 5;			/* move stimulus in increments of 5 um */

  timestep = rstep / velocity;
  sino = sin(theta);
  coso = cos(theta);
  if (r1 < r2)
  {
    for (t=starttime,r=r1; r<=r2; r+= rstep, t+=timestep)
    {
       xbar = r * coso + xcent;
       ybar = r * sino + ycent;
  
       //fprintf(stderr, "#Adding stim for bar at (%g,%g),theta=%g t=%g\n", xbar, ybar, theta, t);
       stim bar bwidth loc(xbar,ybar) blur=sblur inten=sinten start=t dur=timestep orient=theta;
    };
  }
  else if (r1 > r2)
  {
    for (t=starttime,r=r1; r >= r2; r-= rstep, t+=timestep)
    {
       xbar = r * coso + xcent;
       ybar = r * sino + ycent;

       //fprintf(stderr, "#Adding stim for bar at (%g,%g),theta=%g t=%g\n", xbar, ybar, theta, t);
       stim bar bwidth loc(xbar,ybar) blur=sblur inten=sinten start=t dur=timestep orient=theta;
    };
  };

  if (disp==1) exit;
  return t;
};

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

func stepspot(starttime,x1,x2,y,bdia)
/* Make 2 spots separated in time moving from one X position to another across
   the neural circuit */

/*  Returns the time for the end of the stimulus --  */
/*  Useful for setting the time coordinate on the plot ("endexp"). */

/* Dependent on "velocity", and "sinten" */

/* Note that "t" as defined in this proc is not the simulation time -- */
/*  it is merely a local variable used to set the starting time  */
/*  for the stimulus. */
{
  local x, xstep, start2, start1;

  xstep = abs (x1-x2);
  wait = xstep / velocity;
  spotdur = bdia /velocity;

  start1=starttime;
  stim spot bdia loc(x1,y) blur=sblur inten=sinten start=start1 dur=spotdur;
  start2=starttime+wait;

  stim spot bdia loc(x2,y) blur=sblur inten=sinten start=start2 dur=spotdur;
  if (disp) {  //default showstim=FUG
    display stim at start2 dscale 5;
    exit;
  };

  return starttime+2*spotdur+wait;
};

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

func moveannulus(starttime,x1,x2,anndia)
/* Move annulus from one radius to another across the neural circuit */

/*  Returns the time for the end of the stimulus --  */
/*  Useful for setting the time coordinate on the plot ("endexp"). */

/* Dependent on "velocity", and "sinten" */

/* Note that "t" as defined in this proc is not the simulation time -- */
/*  it is merely a local variable used to set the starting time  */
/*  for the stimulus. */
{
  local x, t, xstep, sstep;
  local odia, idia, awidth, sx, sy;

  xstep = 5;			/* move stimulus in increments of 5 um */

  sstep = xstep / velocity;

  sx = node[am][cellnr=1][soma] -> xloc;
  sy = node[am][cellnr=1][soma] -> yloc;

  awidth = anndia;		/* annulus width */

  if (x1 < x2) {
    for (t=starttime,x=x1; x<=x2; x+= xstep, t+=sstep) {
     	 odia = x*2;
         idia = odia - awidth*2;
         if (idia < 0) idia = 0;
         stim spot odia loc(sx,sy) blur=sblur inten= sinten start=t dur=sstep;
         stim spot idia loc(sx,sy) blur=sblur inten=-sinten start=t dur=sstep;
    	 if (showstim==FUG && disp) { //default showstim=FUG
            display stim at starttime+0.001 dscale 5;
            exit;
	 };
    };
  }
  else {
    for (t=starttime,x=x1; x >= x2; x-= xstep, t+=sstep) {
      odia = x*2;
      idia = odia - awidth*2;
      if (idia < 0) idia = 0;

      stim spot odia loc(sx,sy) blur=sblur inten= sinten start=t dur=sstep;
      stim spot idia loc(sx,sy) blur=sblur inten=-sinten start=t dur=sstep;

      if (showstim==PET & disp) {
       	display stim at t dscale 5;
        exit;
      };
    };
  };
  return t;
};

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

proc movesineann (x,y,direction,ann_gaussenv,centdia,phase,speriod,
		  stfreq,sinten,scontr,starttime,sdur)

/* Presents annulus with a moving sine wave grating */
/*  Returns the time for the end of the stimulus --  */

{
  local ct,cn, xsoma, ysoma;

  xsoma = node[ct=sb][cn=1][soma] -> xloc;	/* make cell soma center of annulus */
  ysoma = node[ct=sb][cn=1][soma] -> yloc;

  if (direction==FUG) sdrift=1
  else if (direction==PET) sdrift = -1
  else if (direction==0) sdrift = 0
  else {
    fprintf(stderr,"# Func movesineann error: direction not valid.\n");
    fprintf(stderr,"# Please enter direction of 0 or 1.\n");
     exit;
  };


  if (!notinit(somaclamp)) {	/* user can specify V to clamp soma */
    stim node[ct=sb][cn=1][soma] vclamp somaclamp
		 		start=starttime dur=sdur;
  };

  /* Make a central gray area with diameter "centdia" */
  if (centdia>0)
    stim spot centdia loc (xsoma,ysoma) inten=sinten mask=1
				   start=starttime dur=sdur;

  /* sineann stimulus with x envelope determined by ann_gaussenv */

  stim sineann speriod loc (x,y)	/* outer ring */
		xenv=ann_gaussenv sphase=phase tfreq=stfreq
		inten=sinten blur=sblur
		drift=sdrift contrast=scontr
		start=starttime dur=sdur;  /* */
};

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

proc movewindmill (x,y,direction,ann_gaussenv,centdia,phase,speriod,
		  stfreq,sinten,scontr,starttime,sdur)

/* Presents moving windmill grating */
/*  Returns the time for the end of the stimulus --  */

{
  local ct,cn, xsoma, ysoma;

  xsoma = node[ct=sb][cn=1][soma] -> xloc;	/* make cell soma center of annulus */
  ysoma = node[ct=sb][cn=1][soma] -> yloc;

  if (direction==FUG) sdrift=1
  else if (direction==PET) sdrift = -1
  else if (direction==0) sdrift = 0
  else {
    fprintf(stderr,"# Func movesineann error: direction not valid.\n");
    fprintf(stderr,"# Please enter direction of 0 or 1.\n");
     exit;
  };


  if (!notinit(somaclamp)) {	/* user can specify V to clamp soma */
    stim node[ct=sb][cn=1][soma] vclamp somaclamp
		 		start=starttime dur=sdur;
  };

  /* Make a central gray area with diameter "centdia" */
  if (centdia>0)
    stim spot centdia loc (xsoma,ysoma) inten=sinten mask=1
				   start=starttime dur=sdur;

  /* sineann stimulus with x envelope determined by ann_gaussenv */

  stim windmill speriod loc (x,y)	/* outer ring */
		xenv=ann_gaussenv sphase=phase tfreq=stfreq
		inten=sinten blur=sblur
		drift=sdrift contrast=scontr
		start=starttime dur=sdur;  /* */
};
