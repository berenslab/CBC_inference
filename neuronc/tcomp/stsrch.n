/* stsrch.n */

/* Procedure for Stochastic Search */

SAVAL=0;
SAMAX=1;
SAMIN=2;
SARNG=3;
NSTV =4;		/* number of starting values */

/*------------------------------------------------------------*/

if (notinit(nsap)) nsap = 1;

dim sastart[NSTV][nsap]; /* Starting, max, min values, set by user */
dim saname[nsap];	 /* Names of the parameters */

dim satest[nsap];	/* The test values, used by simulation */

/*
if (notinit(sastart[0][0])) {
    local i,j;
 for (i=0; i<NSTV; i++) {
   for (j=0; j<nsap; j++) {
     sastart[i][j] = 0;
   };
 };
};
*/

/*
func runsim()

{
  return 1;
};
*/

/* Simulated annealing routine to be called from the main script.
This routine calculates new values for the free parameters and
calls the simulation function in the main script.  The simulation
function runs the simulation (from a different set of test values for
the free parameters each time) and computes how close the
simulation is to a template using a matching function.
The simulated annealing procedure decides how to modify the test
values using only the value of the matching function as a guide.
This process is repeated until the difference between the
simulation and the template is minimized.  The best matching
parameters are left in the "bp" array. 

-----------------------------------------------------------
H o w   t o   u s e   t h i s   p r o c e d u r e:

1) Include this file in your script with:

     include "stsrch.n";

2) Set "nsap" equal to the number of free parameters.

3) Put the free parameters into the "sastart" array.  It has 2
dimensions; the first dimension always has a size of 4, and the
second dimension is the size of the number of free parameters.
In the 1st dimension the first value (SAVAL) is the starting
value, the second value (SAMAX) is the maximum limit, the
third value (SAMIN) is the minimum, and the fourth value is 
to hold the range [calculated by stsrch()].

     sastart[4][nsap]

The first set of parameters are the starting values with which
the simulation is to be run, and the second and third are the
maximum and minimum values.  The "runsa" procedure decides what
to do with the starting values for the free parameters.  They are
modfied according to the search algorithm, and are passed to the
simulation as test values in the "satest" array:

    satest[nsap]

4) Write a simulation function, called "runsim()" which runs the
simulation using the test values for the free parameters given by
the "satest[]" array, then reports how closely the simulation
matches the template by returning the value calculated by the
match function.

5) Write a match function. Usually the match is computed by taking
the difference between the simulation's output and a template of
data values to match.  The difference values are squared and
summed to provide a least-squares estimate, which is returned as
the match value.

6) Run the ssrch() procedure, which will run the search, calling
the runsim() function to evaluate the match.  At the end, you can
print out the bp[] array for the best match.

The algorithm starts out with a high temperature, which sets the
width of the Gaussian distribution for each parameter (which is
also set by the max,min range values).  After several ("iter")
iterations the best match is selected as the initial test value
for the next set of iterations. The temperature is reduced (by
10-15%, set by sa_td) and the process repeats.  If no better
match (lower value for pe[]) is found, after a few more
temperature reduction steps the temperature is increased by a
factor (10 - 20, set by sa_tj), and the process of running
several iterations at each temperature reduction step is
repeated. If still stuck, the acceptable match value is increased
randomly, to allow the algorithm to skip over sub-optimal peaks.

Several parameters may need to be tuned. The "sa_mthr" parameter
sets the value of match below which tstuckcrit goes down. Normally
sa_mthr should be set about 2 log units below the initial match
value (i.e. for an initial match of 1e-10, set sa_mthr to 1e-12).
The "sa_ftol" parameter sets the ultimate threshold for stopping.
Normally it should be set about 4-5 log units below the initial
match.  The "sa_ilim" parameter sets the maximum mumber of
iterations.  You can set it to a lower value to enforce a time
limit on the computation.

The number of iterations per temperature step is set by an
automatic algorithm, which sets a larger number according to the
number of free parameters.  If a parameter has SAMAX and SAMIN
values within a ratio of 1e-3, that parameter is considered to be
fixed and the number of iterations is reduced by a factor of 2.

The "info" parameter sets the level of printouts.  A level of 2
prints out the current best match, and a level of 4 prints out
all the tested values.

Advice:

To reduce computation time, the most important factor is to
reduce the number of free parameters.  A simulation with 6 free
parameters that takes several thousand iterations to converge may
converge in only several hundred iterations with 4 free
parameters.  Another problem is correlated parameters. If 2 or
more parameters are correlated (i.e. a reduction in one can be
compensated for to some extent by an increase in the other) then
both their correct values may take several times the computation
time required to find one value.  Also it is always helpful to
constrain a parameter by setting a narrow range for SAMAX and
SAMIN.

*/

/*------------------------------------------------------------*/


/* Set by the Stochastic Search algorithm: */

sa_rnd = 1;			/* sets which random number generator to use */
sa_itot = 0;			/* total iterations */
sstdevthr = 1e-3;		/* stdev thresh for param to be counted free */

sa_y  = 1e20;			/* latest y value */
sa_ye = 1e20;			/* latest estimate for best y value */
dim sa_pe[nsap];		/* latest estimate for best test value */

sanb = 20;			/* number of previous best values to save */
sannb = 0;			/* number of previous best values to save */
dim sa_tb[sanb];		/* best temperature */
dim sa_yb[sanb];		/* best y val */
dim sa_it[sanb];		/* iteration for best y val */
dim sa_pb[sanb][nsap];		/* best test values */

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

proc runstsrch(iter, ndim, temptr)

/* Run simulation a specified number of iterations, with a different */
/*  set of free params each time, given a temperature (stddev multiplier). */
/*  Range of each parameter is limited, so reject param values outside range */

{
    local i,ii,j,sstd;

  for (iter; iter>0; iter--) {

    for (j=0; j<ndim; j++) {
      if (sastart[SARNG][j] > sstdevthr) {
        sstd = temptr * sastart[SARNG][j] / abs(sa_pe[j]);
	//printf ("%g sstd %g\n",j,sstd);
        satest[j] = sa_pe[j] * (1 + rgasdev(sa_rnd)*sstd);
        for (ii=0; (satest[j] > sastart[SAMAX][j] || /* reject if outside rng */
           satest[j] < sastart[SAMIN][j]); ii++) {
           satest[j] = sa_pe[j] * (1 + rgasdev(sa_rnd)*sstd);

           if (ii>1e5) {			/* trouble finding OK val */
             satest[j] = sa_pe[j];
             break;
          };
        };  /* for (ii;;) */
      }
					/* not a free param */
      else satest[j] = (sastart[SAMAX][j]+sastart[SAMIN][j])*.5;
    };

    if (info>=4) {
	fprintf (prout," p %-4g ",sa_itot);
        for (j=0; j<nsap; j++) {
	    fprintf (prout,"%-10.5g ",satest[j]);
        };
    };

    sa_y = runsim();
    sa_itot++;

    if (info>=4) fprintf (prout, " m %-9.4g\n",sa_y);

    if (sa_y < sa_ye) {			/* Save if better than latest */
      for (j=0; j<ndim; j++) sa_pe[j]=satest[j]; /* save the new one */
      sa_ye=sa_y;
    };

    if (sa_y < sa_yb[0]) {		/* Save several of the best-ever. */
       for (i=sanb-1; i>0; i--) { 
         for (j=0; j<ndim; j++) {
	    sa_pb[i][j] = sa_pb[i-1][j];	/* push back the older ones */
         };
         sa_tb[i] = sa_tb[i-1];
         sa_yb[i] = sa_yb[i-1];
         sa_it[i] = sa_it[i-1];
       };
       if (++sannb > sanb) sannb = sanb;
       sa_tb[0] = temptr;
       sa_yb[0] = sa_y;
       sa_it[0] = sa_itot;
       for (j=0; j<ndim; j++) sa_pb[0][j]=satest[j]; /* save the new one */
    };
  };
};

/*------------------------------------------------------------*/

proc ssrch() 

/* find best set of matching parameter values, given arrays:

     sastart[NSTV][nsap]     contains starting values and ranges
            satest[nsap]     contains set of params for each simulation run

*/

 {  local i,j,ii,jj,u; 
    local iter, temptr, oldy;
    local nstuckcrit, tstuckcrit, nfp, npr;

  if (info==6) prout=stderr	/* set output to stderr when using vid */
  else         prout=stdout;	/*  otherwise use stdout */

  if (info >= 2)      fprintf (prout,"# Stochastic Search\n");

  initrand(sa_rnd);

  for (j=0; j<nsap; j++) {
        local swap;

    if (sastart[SAMAX][j] < sastart[SAMIN][j]) {  /* check max min */
             swap = sastart[SAMAX][j];            /*  swap if max is min */
             sastart[SAMAX][j] = sastart[SAMIN][j];
             sastart[SAMIN][j] = swap;
    }; 
    sastart[SARNG][j] =  2 * (sastart[SAMAX][j] - sastart[SAMIN][j]);
   if (info>=4) fprintf (prout,"# %-4s stdev %g\n",saname[j],sastart[SARNG][j]);
  };

  for (nfp=j=0; j<nsap; j++) {	/* find how many params are free */
    nfp += (sastart[SARNG][j] > sstdevthr); 
  };
  if (info >=3) fprintf (prout,"# %g free params\n",nfp);


  for (j=0; j<nsap; j++) {
    if (sastart[SAVAL][j] > sastart[SAMAX][j]) 
		sastart[SAVAL][j] = sastart[SAMAX][j]; 
    if (sastart[SAVAL][j] < sastart[SAMIN][j]) 
		sastart[SAVAL][j] = sastart[SAMIN][j]; 
  };
  for (i=0; i<sanb; i++) {		/* copy starting values */
    for (j=0; j<nsap; j++) {
       sa_pb[i][j] = sastart[SAVAL][j];
    }; 
    sa_yb[i] = 1e20;
    sa_tb[i]  = 0;
    sa_it[i]  = 0;
  };
  for (j=0; j<nsap; j++) {		/* set first test to starting values */
       satest[j] = sastart[SAVAL][j];
       sa_pe[j]  = sastart[SAVAL][j];
  };

  if (notinit(sa_st))   sa_st   = .5;	  /* starting temperature */
  if (notinit(sa_ilim)) sa_ilim = 2000;	  /* maximum # of iterations */
  if (notinit(sa_ftol)) sa_ftol = 1e-14;  /* value of match for stopping */
  if (notinit(sa_mthr)) sa_mthr = sa_ftol*1e3; /*val of match to decr stuckcrit*/
  if (notinit(sa_tstk)) sa_tstk = .01; 	  /* base level for tstuckcrit */
  if (notinit(sa_nstk)) sa_nstk = 5; 	  /* number crit for stuck */
  if (notinit(sa_itb))  sa_itb  = 1.8; 	  /* base for iter to the n power */
  if (notinit(sa_td))   sa_td   = .88;	  /* temperature decrement */
  if (notinit(sa_tj))   sa_tj   = 10;	  /* temperature jump */
  if (notinit(sa_bj))   sa_bj   = .05;	  /* best match jump */
  if (notinit(sa_ybc))  sa_ybc  = .86;	  /* best match criterion */

  temptr = sa_st;			  /* starting temperature */

  sa_ye = runsim();

  if (info>=2) {				/* print header */
	fprintf (prout,"#  i    ");
        for (j=0; j<nsap; j++) {
	    fprintf (prout,"%-10.5s ",saname[j]);
        };
	fprintf (prout," match        temperature\n");
  };
  if (info>=2) {				/* print initial test */
	fprintf (prout,"in %-4g ",sa_itot);
        for (j=0; j<nsap; j++) {
	    fprintf (prout,"%-10.5g ",sa_pe[j]);
        };
	fprintf (prout," m %-10.5g t %-g\n",
			sa_ye, temptr);
  };
  oldy = sa_ye;

  stuck = 0;

  for (u=1; sa_itot < sa_ilim; u) {
    iter = 4 + int(sa_itb^(nfp-1))+(stuck);
    runstsrch(iter, nsap, temptr); /* run simulation with different */
					 /* set of params each time */

    if (info>=2) {				/* print current best match */
	fprintf (prout,"bp %-4g ",sa_itot);
        for (j=0; j<nsap; j++) {
	    fprintf (prout,"%-10.5g ",sa_pe[j]);
        };
	fprintf (prout," m %-10.5g t %-g\n",
			sa_ye, temptr);
    };


    tstuckcrit = sa_tstk / (1+(sa_mthr/sa_ye)); 
    temptr *= pow(sa_td,(1+3*temptr/sa_st));	/* temperature decrement */

    if (sa_ye/oldy >= sa_ybc) {	/* we're stuck here */
				/* try looking harder and vary the range */

      if (++stuck > sa_nstk && temptr < tstuckcrit) 
      {
	  temptr *= sa_tj; 	/* temperature jump */
	  if (temptr > sa_st) temptr = sa_st;
          if (info>=3) fprintf (prout,"stuck, increasing temp\n");
          if (stuck > sa_nstk*2) {
            if (info>=3) fprintf (prout,"stuck, raising match crit\n");
            sa_ye *= 1 + sa_bj * -log(rrand(sa_rnd));
            oldy = sa_ye;
          };
      };

    } else {
      stuck = 0;
      oldy = sa_ye;
      //fprintf (prout,"tch %g match %g\n",temptr, sa_ye);
    };

    if (info>=3) fprintf (prout," stuck %g tstkcrit %g oldyb %g\n",
			stuck, tstuckcrit,oldy);
    if (sa_ye < sa_ftol) break;

  };  /* for (;;) */

/* When done, print out final answer */

  if (info>=1) {
        local npr;

   if (info >=2) {
     npr = sannb;			/* number to print */
     fprintf (prout,"\n");
     fprintf (prout,"Summary of best values:\n");
   }
   else          npr = 1;
   for (i=npr-1; i>=0; i--) {
     if (i==0) fprintf (prout,"fn ")
     else      fprintf (prout,"   ");
     fprintf (prout,"%-4g ",sa_it[i]);
     for (j=0; j<nsap; j++) {
        fprintf (prout,"%-10.5g ",sa_pb[i][j]);
     };
     fprintf (prout," m %-10.5g t %-10.3g  t/m %-10.3g\n", sa_yb[i], sa_tb[i],
					 sa_tb[i]/sa_yb[i]);
   };
  };
  if (info==0) {
     fprintf (prout,"%-9.5g ",sa_yb[0]);
  };
};

/*------------------------------------------------------------*/
