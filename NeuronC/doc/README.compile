
Dear NeuronC enthusiast:


Operating System and Hardware Environment

  NeuronC has been successfully transported to
a wide variety of operating system environments.
The most successful of these are the high-end workstations
where enough memory and CPU power are available to
allow "nc" to simulate 1000-neuron circuits with ease.
The "nc" program running on larger time-shared mainframe
systems often runs 10 to 100 times slower than the 
native speed so there may be little advantage in using
a mainframe except its large amount of memory.
Obviously, "nc" uses lots of floating-point math so it 
requires the use of math-coprocessors where available.
"nc" has been successfully transported to:

 Hardware          OS     RAM    display       comment

 Intel/AMD 3 GHz   Linux  256 MB X11R6   Extremely fast, good value
 Mac G5		   OSX    1 GB   X11     Extremely fast
 SGI Indigo        Unix   32 MB  X11R4   Extremely fast. 20,000 compartments.
 Cray X-MP         Unicos lots   text    Very fast, but timeshared.   
 Convex 240        Unix   500 MB text    Very fast, very big, but timeshared.
 PC-clone/3,486    DOS    640K   EGA,VGA Slow, small, but OK for small models.
 DEC Alpha         Linux  256 MB X11R6   Extremely fast, good value.

/********************************************************/

Release 6.0 "nc" distributed in C++

  Because of the growing standardization on the C++ language, I
am distributing "nc" in C++.  All the ".n" nc script files
have been rewritten in ".cc" format so they can be compiled, in
"nc/src". Instead of statements in a script language, the header
file "ncfuncs.h" defines all the basic simulation functions. You
can see an example in "nc/models/retsim", which is a set of
scripts defining a retina simulation.

/********************************************************/

Compiling under Windows/Cygwin

NeuronC compiles with most C/C++ compilers, for example, "gcc"
under Linux or Mac OSX.  You can also compile under Windows
(Win98,Win2000,WinXP) after installing "Cygwin", which is a
"Linux-like" environment for Windows. Under Cygwin You'll have
to modify the "nc/src/makefile" to replace "yacc" with
"yacc.exe", and once nc.exe is created you'll need to refer to
it by that name instead of "nc". Copy the binaries "nc",
"plotmod", "stim", and "pl/vid" to "/usr/bin" using "cp".

If you need to edit some of the source code files under Windows, 
you may have difficulty using simple editors such as "notepad" 
because they do not recognize the "\n" (line feed) as the
"end-of-line" character. To fix this, you can compile "cradd.c"
to make cradd, then access it using "crad":

For example, to edit "makefile":

     cd nc/doc
     make cradd
     cradd.exe < makefile > m  && mv m makefile
     notepad makefile
 
/********************************************************/

Compiling under DOS.

To compile "nc" under DOS, download the djgcc distribution
(free GCC for DOS) from:

     http://www.delorie.com

Install the djgcc in a subdirectory on your DOS disk, and install
(with tar) the nc distribution.  You can compile nc under DOS
with only a few modifications:

1) change "../yaccsrc/yacc" to "bison" in nc/src/makefile

2) change all references to "y.tab.h" to "nctab.h"
in all the nc/src files and the makefile.  Change all
references to "y.tab.cc" in the makefile to "nctab.cc".

3) comment out calls to "cleanup()" in nc/libP/_err.c

4) The "vid" program will not compile under djgpp without
some modification.  The reason is that the VGA screen is
accessed differently in dgjpp than in Linux.  I have not
taken the time to make the changes but they should not
be difficult.

5) You can get the nc.exe binary in the ncdos.tgz distribution.

/********************************************************/

Problems compiling

   There are a few problems that occasionally arise when
compling "nc" on a new machine.  There are some hardware
dependencies in "nc" code that ideally should be corrected.

1) Elapsed time.  The size of clock ticks is machine dependent,
and "nc" reports elapsed time based on the system subroutine
"times()".  To verify that the elapsed time reported by "nc"
is correct, run "time nc" and wait for 10 seconds or so,
and then stop it with ^D or ^C.  The "total x.xxx minutes"
printout from "nc" should be equal to the elapsed time. 
If it is not, you can change the constant "TIMECALIB" 
to correct this.   Two commonly used values of TIMECALIB
are listed near the beginning of "ncmain.c".  You should
uncomment the one that gives the correct time calibration.
 

2) On some machines, the library subroutine "strtod()" does 
not exist so I have written a version of this subroutine
because it is essential in nc's parsing of the input file.
However this subroutine calls the "sscanf" library subroutine
which on some machines is defined as a call to "strtod()".
This results in an infinite recursive call which usually
crashes the "nc" program immediately. If you discover a problem
like this when first testing "nc", remove "strtod.o" from
"nc/makefile" and recompile.  Assuming "strtod()" is defined
somewhere in the system C library, this should prevent
the error.

3) Occasionally, there is a problem with "printf" on new 
machines that originates in the fact that the "nc" code
that emulates "printf" does not "know" how many parameters
is being passed to it by the user.  On many machines, printf
simply calls a subroutine called "_doprnt()" which is especially
written to parse the arguments passed to it and stops parsing
when no more arguments exist.  However on some systems, this
subroutine does not exist or is not available.  Therefore, I
have included code as an alternative to "_doprnt()" that assumes
5 or more arguments passed and will fail if more than 5 are
passed, and will sometimes unconditionally fail if arguments
are not passed on the "stack".  This is obviously a
machine-dependent problem and needs to be fixed. 

4) The different drivers included in "vid" can be confusing to
some people who wish to change the default graphics driver.
The file "pl/mvid.c" sets up all the drivers at run-time and
it is necessary to modify "pl/makefile" to include the "mprint?.o"
files corresponding to the options set at the beginning of "pl/mvid.c".
Remember, the default graphics driver is set in "pl/vdef.h".

5) Compiling without X11.  As stated in point 4) above, to remove
a graphics driver from the "vid" graphics interface, you need to
edit "pl/makefile" to delete the driver's object file (".o" file)
and also edit the "pl/mvid.c" file to "comment out" the corresponding
definition statement.  To remove the X driver:

a) edit "pl/makefile" and remove "mprintx.o" from the

VOBJS = vid.o mprinta.o mprintc.o mprinte.o mprintv.o mprinth.o mprintl.o \
	mprintx.o hfile.o hvirt.o mvid.o iopriv.o putsym.o getws.o

so that it looks like:

VOBJS = vid.o mprinta.o mprintc.o mprinte.o mprintv.o mprinth.o mprintl.o \
	hfile.o hvirt.o mvid.o iopriv.o putsym.o getws.o


b) edit "pl/mvid.c" and comment out line 68:

#define TXWIN				/* X-windows graphics */

so that it looks like:

/* #define TXWIN			/* X-windows graphics */

c) edit the file "pl/vdef.h" to change the default video driver:
Comment out the line:
   
#define SCRNTYP XWIN		/* */

so that it looks like:

/* #define SCRNTYP XWIN		/* */

and add another line that defines another driver by default,
for example:

#define SCRNTYP COLORPS	/* */

d) remake "pl/vid":

% make vid
% cp vid ~/bin 

6) "ranlib" - on some systems, the "ranlib" command is not required
since libraries do not require any processing after they have
been created.  If you get an error saying that "ranlib" is not
found, you can usually safely ignore it.

7) "src/ncm.cc" - On some systems, the "sighandler_t" type is
not declared and causes an error when compiling this file.
If this happens, go into the file and uncomment the line:

  /* typedef int __sighandler_t;   /* */

so it looks like:

  typedef int __sighandler_t;   /* */

This may fix the problem.  If it doesn't, you may need to 
look up the "signal()" subroutine on your system to see what
type of parameters it requires and substitute a different type
for "__sighandler_t".



Rob Smith                      January, 2009

rob@retina.anatomy.upenn.edu

Department of Neuroscience
Rm 123, Anat-Chem Bldg.
University of Pennsylvania
Phila., PA  19104-6058
USA


