#! nc
#
# See explanation in the sensitivity function file "perlman.txt".
#
#
fread ("perlman.txt",turtle,y,z);

maxwav = 800;
minwav = 380;
wavinc = 5;
wavsiz = (maxwav - minwav) / wavinc + 1;

dim wav[wavsiz];
dim pigms[3][wavsiz];

PL = 0;
PM = 1;
PS = 2;

/* the turtle sensitivity functions */

for (j=0; j<3; j++) {
 for (i=0; i<wavsiz; i++) {
  wav[i] = 0;
  pigms[j][i]   = 0;
 };
};

/****************************************************/
/* Model of long-wave log(sens) function, after Lewis, 1955) */
/*  This relies on the fact that at long wavelengths the     */
/*  log(sensitivity) of visual pigments asymtotes to a       */
/*  straight line plotted against wavenumber (1/wavelength). */

/* The three pigments' log(sens) functions are supposed to superimpose */
/*  when they are plotted against wavenumber and shifted horizontally */
/*  to superimpose their peaks. The slope of the line may vary a little
/*  but is assumed here to be the same for all three functions when   */
/*  superimposed. */

lshift = 19;	/* shift the L cone curve left by 19 points */
sshift = 17;	/* shift the S cone curve right by 17 points */

sl = 16700;
b = -28.0;

func longwav (j) {
   return sl * 1/(minwav+j*wavinc) + b;
};

/****************************************************/

/* Uncomment this part to print out the log10 of turtle cone sensitivity */
/*  from "perlman.txt". */

/*
for (i=0; i<wavsiz; i++) {

 printf ("%6.4g %6.4g %6.4g %6.4g\n",turtle[i][0],
		log10(turtle[i][1]),
		log10(turtle[i][2]),
		log10(turtle[i][3]));
}; /* */


/* Read in data, set L, M, and S curves to be log10 of sensitivity */

for (i=0; i<y; i++) {

 wav[i] = turtle[i][0];
 pigms[PL][i]   = log10(turtle[i][1]);
 pigms[PM][i]   = log10(turtle[i][2]);
 pigms[PS][i]   = log10(turtle[i][3]);

}; /* */

/* Extend the wavelength numbers to 800 nm */
/*  to allow extrapolation */

for (i=y; i<wavsiz; i++) {
   wav[i] = minwav + i * wavinc;
}; /* */

/****************************************************/

/*    Shift L and S curves to overlap M curve */
/*     Do this only for test purposes */

/*
for (i=0; i<wavsiz; i++) {

 if (i+lshift < wavsiz) pigms[PL][i] = log10(turtle[i+lshift][1])
 else                   pigms[PL][i] = log10(turtle[i][1]);
 pigms[PM][i]   = log10(turtle[i][2]);
 if (i-sshift >= 0)     pigms[PS][i] = log10(turtle[i-sshift][3])
 else                   pigms[PS][i] = log10(turtle[i][3]);

}; /* */


/* Extrapolate the L curve beyond 680 nm */
/*  Between 680 and 730, use the S curve, shifted right */
/*  Beyond 730, use longwave extrapolation */

for (i=0; i<wavsiz; i++) {

 if (wav[i]<=680) pigms[PL][i] = log10(turtle[i][1])
 else 
 if (wav[i]<=730) pigms[PL][i] = log10(turtle[i-lshift-sshift][3])
 else             pigms[PL][i] = longwav(i-lshift);
   
}; /* */

/* Extrapolate the M curve beyond 650 nm */

for (i=0; i<wavsiz; i++) {

 if (wav[i]<=645) pigms[PM][i] = log10(turtle[i][2])
 else             pigms[PM][i] = longwav(i);
   
}; /* */

/* Extrapolate the S curve beyond 540 nm */

for (i=0; i<wavsiz; i++) {

 if (wav[i]<=535) pigms[PS][i] = log10(turtle[i][3])
 else             pigms[PS][i] = longwav(i+sshift);
   
}; /* */

/****************************************************/

pigmlen = 35;

lpeaksens = .7;
mpeaksens = .7;
speaksens = .7;

/* Convert to specific optical density (for testing only). */

/*
for (i=0; i<wavsiz; i++) {

   pigms[PL][i] = -log(1-exp(pigms[PL][i]*log(10))*lpeaksens)/log(10) / pigmlen;
   pigms[PM][i] = -log(1-exp(pigms[PL][i]*log(10))*mpeaksens)/log(10) / pigmlen;
   pigms[PS][i] = -log(1-exp(pigms[PL][i]*log(10))*speaksens)/log(10) / pigmlen;

}; /* */

/****************************************************/

/* Plotting variables */

startwav = 380;
startplot = (startwav-minwav)/wavinc;
stoplot = wavsiz;

pigml = pigmlen;
pigml = 35;			/* vary this to change peak width */

linelen = 100;

for (i=startplot,p=1; i<stoplot; i++,p++) { /* */


/*printf ("%g %g %g %g \n", wav[i], pigms[PL][i], pigms[PM][i], pigms[PS][i]);

/* printf ("%g %g %g %g \n", wav[i], 1-exp(-pigms[PL][i]*pigml*log(10)), 
				  1-exp(-pigms[PM][i]*pigml*log(10)), 
				  1-exp(-pigms[PS][i]*pigml*log(10)));
*/

/*
printf ("%g %g %g %g \n", wav[i], exp(pigms[PL][i]*log(10)), 
				  exp(pigms[PM][i]*log(10)), 
				  exp(pigms[PS][i]*log(10)));
*/

//printf ("%g %g %g %g %g\n", - 1/wav[i], pigms[PL][i], 
//				pigms[PM][i], pigms[PS][i], longwav(i));
//printf ("%g %g %g\n", - 1/wav[i],  pigms[PL][i], longwav(i));
//printf ("%g %g %g\n", wav[i],  pigms[PM][i],     longwav(i));
//printf ("%g %g %g\n", wav[i-sshift],  pigms[PS][i], longwav(i));
//printf ("%g %g %g\n", wav[i+lshift],  pigms[PL][i], longwav(i));

};

linelen = 8;

printf ("/* Turtle sensitivity functions (log(sens)) */\n");
printf ("/*  from 380 to 800 nm in 5 nm increments.  */\n");
printf ("/*  Order: L, M, S cones */\n\n");
printf ("float turtlepigm[3][PIGMSIZ] = {\n ");


for (j=PL; j<3; j++) {
  for (i=startplot,p=1; i<stoplot; i++,p++) { /* */
    printf ("%7.5g,", pigms[j][i]);
    if (p>=linelen) {
	printf ("\n ");
	p = 0;
    };
  };
  printf ("\n\n ");
};
printf ("  };\n");

