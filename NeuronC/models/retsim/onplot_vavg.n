/*
   This file contains a general purpose facility for
   recording the average membrane potential over a given
   time interval for a given set of nodes. The average
   is taken every time vavg_onplot is called, but data
   points are only recorded if the membrane potential
   is under VAVG_THRESHOLD, which is set at -40mV to
   avoid including spikes in the average.
*/

MAX_VAVG_NODES = 100;

VAVG_THRESHOLD = -.04;

//the array containing the nodes to record
//the spike count from. each element of
//vavg_nodes is an array of length 3,
//where the first element is the cell type,
//the second element is the cell number,
//and the third element is the node number
dim vavg_nodes[MAX_VAVG_NODES][3] = { {-1, -1, -1}  };
for (i = 0; i < MAX_VAVG_NODES; i++) {
   vavg_nodes[i][0] = -1;
   vavg_nodes[i][1] = -1;
   vavg_nodes[i][2] = -1;
};
  
    

//the sum of the potentials over the interval
dim vavg[MAX_VAVG_NODES] = {{ 0 }};

//the number of data points recorded in this interval
dim vavg_points[MAX_VAVG_NODES] = {{ 0 }};

//whether or not to average potential in vavg_onplot()
//when set to 1 (on), vavg_points will be reset to 0
dim vavg_on[MAX_VAVG_NODES] = {{ 0 }};


//convienience function to get the
//next available index for the
//vavg_nodes array, or -1 if the
//array is full
func getavailableindex_vavg()
{
  local i;
  for (i = 0; i < MAX_VAVG_NODES; i++) {
    if (vavg_nodes[i][0] == -1) {
      return i;
    };
  };
  return -1;
};


//gets the index of the node specified
//by the cell type, number, and node,
//or -1 if no such node exists
func get_node_vavg_index(ct, cn, n)
{
  local i;

  for (i = 0; i < MAX_VAVG_NODES; i++) {
    if ( (vavg_nodes[i][0] == ct) &&
         (vavg_nodes[i][1] == cn) &&
         (vavg_nodes[i][2] == n) ) {    
      return i;
    };
  };
  return -1;
};


//start recording membrane potential averages for
//the specified node
proc start_vavg(ct, cn, n)
{
  local index;
  
  index = get_node_vavg_index(ct, cn, n);
  if (index != -1) {
    vavg_on[index] = 1;
    vavg_points[index] = 0;
    vavg[index] = 0;
  };
};


//stop averaging potentials for the specified node
proc stop_vavg(ct, cn, n)
{
  local index;
  
  index = get_node_vavg_index(ct, cn, n);
  if (index != -1) {
    vavg_on[index] = 0;
  };
};


//get the averaged potential for a specified node
func get_vavg(ct, cn, n)
{
  local index;
  
  index = get_node_vavg_index(ct, cn, n);
  if ((index != -1) && (vavg_points[index] > 0)) {
    return vavg[index];
  };
  return -1;
};


//adds a node to the array and returns
//the index in the array, otherwise returns -1
func add_vavg_node(ct, cn, n)
{
  local index;
  //index = get_node_vavg_index(ct, cn, n);
  //if (index == -1) {
    index = getavailableindex_vavg();
    if (index != -1) {
      vavg_nodes[index][0] = ct;
      vavg_nodes[index][1] = cn;
      vavg_nodes[index][2] = n;
      vavg_on[index] = 0;

      return index;
    };
  //};
  return -1;
};

//remove a node from the recording array
func remove_vavg_node(ct, cn, n)
{
  local index;
  index = get_node_vavg_index(ct, cn, n);
  if (index != -1) {
    vavg_nodes[index][0] = -1;
    vavg_nodes[index][1] = -1;
    vavg_nodes[index][2] = -1;
    vavg_on[index] = 0;

    return 1;
  };
  return 0;
};

func remove_all_vavg_nodes()
{
  local i;
  for (i = 0; i < MAX_VAVG_NODES; i++) { 
    vavg_nodes[i][0] = -1;
    vavg_nodes[i][1] = -1;
    vavg_nodes[i][2] = -1;
    vavg_on[i] = 0;
  };
};


//call this function in your experiment's onplot()
//procedure to make potential averaging work, after
//calling the add_vavg_node() function
proc vavg_onplot()
{
  local i, v, celltype, cellnumber, nodenumber, spikewidth;
  for (i = 0; i < MAX_VAVG_NODES; i++) {     
    if (vavg_on[i]) {
        celltype = vavg_nodes[i][0];
        cellnumber = vavg_nodes[i][1];
        nodenumber = vavg_nodes[i][2];
        v = V[celltype][cellnumber][nodenumber];
        //fprintf(stderr, "#[%g][%g][%g], t=%g v=%g\n", celltype, cellnumber, nodenumber, time, v);

        if (v <= VAVG_THRESHOLD) {
          vavg[i] = (vavg_points[i]*vavg[i] + v) / (vavg_points[i]+1);          
          vavg_points[i]++;
        };
    };    
  };
};

