/*
   This file contains a general purpose facility for
   recording spike counts in a given time interval for
   a given set of nodes.
*/

MAX_SPIKE_COUNT_NODES = 100;
MAX_SPIKES = 1000;

SPIKE_THRESHOLD = -.04;

N_CT = 0;	// indexes for spike_count_nodes[]
N_CN = 1;
N_NN = 2;
MAXN = 3;


/*-------------------------------------------------------*/ 

// Array containing the nodes to record the spike count

dim spike_count_nodes[MAX_SPIKE_COUNT_NODES][MAXN] = {{-1}};

// The current spike count

dim spike_count[MAX_SPIKE_COUNT_NODES] = {{ 0 }};

// Time that the voltage was found to be over threshold

dim spike_start_time[MAX_SPIKE_COUNT_NODES] = {{ 0 }};

dim spike_times[MAX_SPIKE_COUNT_NODES][MAX_SPIKES] = {{0}};

/*-------------------------------------------------------*/ 

spike_count_initfl = 0;

proc spike_count_init()

// initialize 
{
  if (!spike_count_initfl) {
    spike_count_initfl = 1;
    for (i = 0; i < MAX_SPIKE_COUNT_NODES; i++) {
     spike_count_nodes[i][N_CT] = -1;
     spike_count_nodes[i][N_CN] = -1;
     spike_count_nodes[i][N_NN] = -1;
    };
  };
};
 
func getavailableindex_spike_count()

// Get the next available index for the spike_count_nodes 
//  array, or -1 if the array is full.

{
  local i;
  for (i=0; i<MAX_SPIKE_COUNT_NODES; i++) {
    if (spike_count_nodes[i][0] == -1) {
      return i;
    };
  };
  return -1;
};


func get_node_spike_index(ct, cn, n)

// Get the index of the node specified or -1 if no 
//  such node exists.

{
  local i;

  for (i = 0; i < MAX_SPIKE_COUNT_NODES; i++) {
    if ( (spike_count_nodes[i][N_CT] == ct) &&
         (spike_count_nodes[i][N_CN] == cn) &&
         (spike_count_nodes[i][N_NN] == n) ) {    
      return i;
    };
  };
  return -1;
};

/*-------------------------------------------------------*/ 

func get_spike_count(ct, cn, n)

// Get the spike count for a specified node.

{
  local index;
  
  index = get_node_spike_index(ct, cn, n);
  if (index != -1) {
    return spike_count[index];
  };
  return -1;
};


func add_spike_count_node(ct, cn, n)

// Start spike counting at a node. Returns the node's index,
//  otherwise if there isn't any space left or the node has 
//  already been added, return -1.

{
  local index;

  spike_count_init();
  index = getavailableindex_spike_count();
  if (index != -1) {
    spike_count_nodes[index][N_CT] = ct;
    spike_count_nodes[index][N_CN] = cn;
    spike_count_nodes[index][N_NN] = n;

    return index;
  };
  return -1;
};


func remove_spike_count_node(ct, cn, n)

// Remove a node from the recording array.

{
  local index;
  index = get_node_spike_index(ct, cn, n);
  if (index != -1) {
    spike_count_nodes[index][N_CT] = -1;
    spike_count_nodes[index][N_CN] = -1;
    spike_count_nodes[index][N_NN] = -1;
   
    return 1;
  };
  return 0;
};

proc remove_all_spike_count_nodes()

// Remove all nodes from the recording array.

{
  local i;
  for (i=0; i<MAX_SPIKE_COUNT_NODES; i++) {
    remove_spike_count_node(spike_count_nodes[i][N_CT],
                            spike_count_nodes[i][N_CN],
                            spike_count_nodes[i][N_NN]);    
  };
};

/*-------------------------------------------------------*/ 

proc onplot_spike_count()

// Call this function in your experiment's onplot()
//  procedure to make spike counting work, after
//  calling add_spike_count_node().

{
  local i, v, celltype, cellnumber, nodenumber, spikewidth;

  for (i=0; i<MAX_SPIKE_COUNT_NODES; i++) {
    if ((celltype= spike_count_nodes[i][N_CT]) >= 0) {
      cellnumber = spike_count_nodes[i][N_CN];
      nodenumber = spike_count_nodes[i][N_NN];
      v = V[celltype][cellnumber][nodenumber];
    //fprintf(stderr, "#t=%g v=%g starttime=%g\n", time, v,spike_start_time[i]);

      if ( (v > SPIKE_THRESHOLD) && (spike_start_time[i] == -1) ) {
         spike_start_time[i] = time;
         if ((spike_cnt=spike_count[i]) >= MAX_SPIKES)
           spike_cnt = MAX_SPIKES-1;
	   spike_times[i][spike_cnt] = time;
      } else if ( (v < SPIKE_THRESHOLD) && (spike_start_time[i] > 0) ) {
         //spikewidth = time - spike_start_time[i];
         //fprintf(stderr, "#spike width=%g\n", spikewidth);

        spike_start_time[i] = -1;
        spike_count[i]++;
      };
    };
  };
};

