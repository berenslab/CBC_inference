/* Index definitions for array "gcdens": */

/* Format of morphology file */
/*

#    node  parent   dia     xbio     ybio     zbio     region dendr
#
      0      0     15       -15.42   2.34     10       SOMA     0
      1      0     3.5      -12.12   5.4      15       AXON     0
      2      1     2.1      -13.61   6.71     15       DEND     1
      3      2     1.58     -12.25   4.76     15       DEND     2
      .
      .
      .
*/

/* Regions: Column numbers */

DEND         = 0;
DEND_PROX    = 1;
DEND_DIST    = 2;
SOMA         = 3;
HILLOCK      = 4;
AXON_THIN    = 5;
AXON         = 6;
AXON_LONG    = 7;
nregions     = 8;
VARICOS      = 8;   /* don't make table entry for VARICOS, part of DEND */


/* Channel types: Row numbers */

NA    = 0;        /* noise type 1 */
NA6   = 1;        /* persistent Na: type 6 */
CA    = 2;
KDR   = 3;        /* type 0 , noise: type 1 */
SKCA1 = 4;
SKCA2 = 5;
BKCA  = 6;
KA    = 7;        /* type 2 , noise: type 3 */
nchans = 8;


dim chname[] = {{ "Na", "Na6", "Ca", "Kdr", "SKCa1", "SKCa2", "BKCa", "KA" }};

dim regname[] = {{ "dend","dend_prox","dend_dist","soma","hillock","thin","axon",
							     "axon_long"}};
dim gcdens [nchans][nregions];
dim amdens [nchans][nregions]; 

/* - - - - - - - - - - - - - - - - - - - - - - - - */

func rrange (L, H)

/* return a number between L and H */

{
    local t__;

  if (notinit(nonrand)) nonrand=0;

  if (H < L) {
      t__ = L;
      L = H;
      H = t__;
   };

  if (nonrand)
    return (L+H)/2
  else
    return ( L + rand() * (H - L) );
  
};

/* - - - - - - - - - - - - - - - - - - - - - - - - */

func find_SD (values,avg)
{
	local i, d, n, smax, dtot, sd;
	smax=sizeof(values);

	n=0;
	dtot = 0;
	for (i=0;i<smax;i++) {
	  if (!notinit(values[i]) && values[i]!=-1) {
	    d=values[i]-avg;
	    dtot=dtot+d*d;	  //sum of squared differences
   	    n++;
 	  };
	};

	
	if (n==0)
	  sd=0		   //if all values were notinit or -1, make SD 0
	else
	  sd=sqrt(dtot/n); 

	return sd;
};

/* - - - - - - - - - - - - - - - - - - - - - - - - */

proc printdens (label, mult)
{
printf ("# \n");
printf ("#   Channel densities (%s)\n",label);
printf ("# \n");
printf ("#   ");
   for (ch=0; ch<nregions; ch++)
     printf ("%-8s ",regname[ch]);

printf ("\n");
printf ("# \n");
   
   for (ch=0; ch<nchans; ch++) {
     printf ("#   ");
     for (region=0; region<nregions; region ++) {
        printf ("%-8.4g ",gcdens[ch][region] * mult);
     };
     printf (" %s\n",chname[ch]);  
   };
printf ("# \n");
};


/*  Definition of colums for "anatfile" which defines cell anatomy:*/

/* node     parent   dia      xbio     ybio    zbio     region */

NODE  = 0;
PAR   = 1;
DIA   = 2;
AX    = 3;
AY    = 4;
AZ    = 5;
REG   = 6;
DENDN = 7;

LOCX = 0;
LOCY = 1;
DIR = 2;

MORPH_REAL = 0;
MORPH_SIMPLE = 1;
MORPH_ARTIF = 2;
/* - - - - - - - - - - - - - - - - - - - - - - - - */

func mod (a,b)

{
    local div,a1,a2;
    if (a>=0 && b>0)
    {
     a1=a/b;
     a2=a1*b;
     return (a-a2);
    }
    else printf ("Cannot divide by zero!");
};

/* - - - - - - - - - - - - - - - - - - - - - - - - */

func modangl(a)

{
 while (a<0)    { a+= 2*PI;};
 while (a>=2*PI) { a-= 2*PI;};
 return a;
};

/* - - - - - - - - - - - - - - - - - - - - - - - - */

PI2=2*PI;

/* function to test range of angle */
func inrange(a1, a2, t)

/* a1, a2 define a chord range. a1 is less, and a2 is greater. */

/* If t is in that range, return 1, else return 0 */

{
  a1 = modangl(a1);
  a2 = modangl(a2);
  t  = modangl(t);

  if (a1>a2) {
     a2 += PI2;
     if (t < a1) t += PI2;
  };
  retval = (t>=a1 && t <=a2);
  //printf ("%8.3g %8.3g %8.3g %8.3g\n", a1,a2,t, retval);
  return retval;
};

/* - - - - - - - - - - - - - - - - - - - - - - - - */

func atanx (dx, dy)

{
    local slope, theta;

  if (dx == 0) dx = 1e-6;
  slope = dy/dx;
  theta = atan(slope);
  if (slope >= 0) {
        if(dx < 0) theta -= PI;
  }
  else {
        if(dx < 0) theta += PI;
  };
  if (theta < 0) theta += 2 * PI;
  return theta;
};

/* - - - - - - - - - - - - - - - - - - - - - - - - */

func rad_diam (dist,diaspc,diabs)

{
  local diam;

  diam = exp (-dist/diaspc) * diabs;
  return diam;
};

/* - - - - - - - - - - - - - - - - - - - - - - - - */

func rad_dist2 (celtyp, n, tnod, parent, stflag)

/* Compute distance along dendrite back to cell body
   as the radial distance from the distal node to
   the soma.
*/

{
  return (n3dist ([celtyp][n][tnod], [celtyp][n][0]));
};

/* - - - - - - - - - - - - - - - - - - - - - - - - */

func taperdia  (n1a,n1b,n1c, n2a,n2b,n2c, diabs, diaspc) {

/* Find diameter of far end of a tapered dendrite, given start
   diameter. Calculate from space constant.
*/
    local xrange,yrange,drange;
    local x1,y1,x2,y2;
    local edia;
    local dist,newdist,nlength;

 x1 = node [n1a][n1b][n1c] -> xloc;
 y1 = node [n1a][n1b][n1c] -> yloc;

 x2 = node [n2a][n2b][n2c] -> xloc;
 y2 = node [n2a][n2b][n2c] -> yloc;

 xrange = (x2-x1);
 yrange = (y2-y1);

 dist = rad_dist2 (n1a, n1b, n1c, n2c, 1);      /* find distance to soma */

 if (ptrace) printf ("taperdistden: node %g %g %g dist %g\n", n1a,n1b,n1c,dist);

 newdist = sqrt (xrange*xrange + yrange*yrange);

 edia = rad_diam (newdist,diaspc,diabs);

 return (edia);
};

/* - - - - - - - - - - - - - - - - - - - - - - - - */

func sigm(xmin,xmax,ymin,yrange,pointx)

/* Returns y-val on specified sigm func for pointx */

{
     local i, midpoint;

 i= pointx;
 midpoint=(xmin+xmax)/2;
 y = ymin + yrange/(1+E^(-i+midpoint));
 return y;
};

/* - - - - - - - - - - - - - - - - - - - - - - - - */

func comp_phase(tfreq,delaytime) {

  local phase, ncycles;

  while (delaytime < 0)	      //make delaytimes positive
    delaytime = delaytime + 1/tfreq;
  ncycles = delaytime * tfreq; //nr of cycles in delaytime
  while (ncycles>=1)	      //subtract all whole cycles
     ncycles--;
  phase = ncycles*360;	      //convert remainder into degrees

  return phase;
};

/* - - - - - - - - - - - - - - - - - - - - - - - - */

func sinewaves(phase1,phase2,ampl1,ampl2) {
  //add 2 sinewaves, return ampl of sum

  shiftrad1 = (phase1/360)*2*PI;  //deg -> rad
  shiftrad2 = (phase2/360)*2*PI;

  ysum = 0;
  ypeak = 0;
  yratio = 0;

  nsteps=100;

  for (x=0;x<=2*PI;x+=(2*PI)/nsteps) {
    y1 = ampl1*sin(x+shiftrad1);
    y2 = ampl2*sin(x+shiftrad2);
    ysum = y1+y2;
    if (ysum>ypeak) ypeak=ysum;
  };

  yratio = ypeak/(ampl1+ampl2);

  return ypeak;

};

proc makanatfile (celltype,cellnr) {

  local node1, node2, dendcount, dendnr, region, xpos, ypos, zpos, diam ;
  local dim dendnodes[30][100];	//hold the nodes belonging to each dend

  fprintf (stdout, "#  node  parent   dia     xbio    ybio     zbio       region  dendnr\n");

  //initialise local array dendnodes
  for (d=0;d<30;d++)
    for (n=0;n<100;n++)
      if (notinit(dendnodes[d][n])) dendnodes[d][n] = -1;

  dendcount=0; //count nr of dendrites

  //foreach element ?br node[celltype][cellnr][-1] {
  //go through all cables, for every node print out parameters for amacfile
  foreach element ?br {
   node1 = element br -> node1c; //descendent node
   node2 = element br -> node2c; //parent node

   //soma has neg nodenr as parent, call the rest dend
   if (node2<0){
   	region="SOMA";
	node2=0;
	dendnr=0;
   }
   else region="DEND";

   //count nr of dendrites leaving soma, make array with parents for every dend nr
   if (node2==0) {  	//if parent is soma, give child its own dendr-nr.
     dendnodes[dendcount][0] = node1;
     dendnr=dendcount;
     dendcount++;
   }
   else  //go through dendnodes, find parent, use its dendnr, add node to arr
     for(d=0;d<dendcount;d++)
       for (n=0;n<100;n++) {
         if (dendnodes[d][n]>-1 && dendnodes[d][n]==node2) {
	   dendnr=d;
	   dendnodes[d][n+1]=node1;
	   break;
	};
     };

   xpos = node [am][cellnr][node1] -> xloc;
   ypos = -1* (node [am][cellnr][node1] -> yloc); //*-1 is needed..
   zpos = node [am][cellnr][node1] -> zloc;
   diam = element br -> dia;
   zpos = -5;

   fprintf (stdout,
   "%7g %6g   %-7.3g %-8.4g %-8.4g %-8.4g   ",
   node1, node2, diam, -1*xpos, -1*ypos, zpos);
   fprintf(stdout, "%-s  ", region);
   fprintf(stdout, "%6g\n", dendnr);
  };
};
