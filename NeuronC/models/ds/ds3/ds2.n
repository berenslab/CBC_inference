#! nc -c

/* Creates ds cell with spike generator */

/* general parameters */		

ploti    = 1e-4; 
crit     = 1e-8; 
tempcel  = 35;
implicit = 1; 
drm      = 50000;
plsep    = 1;
rseed    = 32214581;

vcl = -0.065;
vk  = -0.080;
vna = +0.04;

amrm = 40000;

soma	= 0;
gang	= 1;
bipl 	= 2;
amac    = 3;

ndseg = 10;			/* number of gc/bp/am segments */

	
/* synaptic parameters */	

condf 	= 22e-12; /* unit conductance of synapes */
nchanbp	= 30;     /* N postsynaptic chan. */
nchanam	= 50;     /* N postsynaptic chan. */
nchanbpam= 10;     /* N postsynaptic chan. */
amu     = 5e-12;  /* bp-> amacrine unitary current */
sfdur 	= 2;
srdur 	= .5;
dvsz    = 10;     /* default vesicle size when no noise */
vsiz	= 10;
expon1	= 2;
exponamgc= 5;
thresh1 = -0.045;

/* end: synaptic parameters */	

/* experiment control variables */	

make_gc		= 1; 	 	/* make ganglion cell */
make_bp		= 1; 	 	/* make bipolar cell */
make_amac	= 1; 	 	/* make amacrine cell */
make_bpsyn	= 1; 	 	/* make bipolar cell synapses */
make_bpam	= 1; 	 	/* make bipolar cell -> amac synapses */
make_bpgc	= 1; 	 	/* make bipolar cell -> GC synapses */
make_amgc	= 0; 	 	/* make amacrine cell -> GC synapses */
light_resp	= 1;
current_stim	= 1;

postsyn_noise	= 0;
ves_noise       = 0;

expt = "surf_area";		/* calc surface area */
expt = "istim_soma";		/* somatic current */
expt = "epsc";			/* spot, short flash with vclamp to see epsc*/
expt = "fro";			/* spot moving left */
expt = "to";			/* spot moving right */
expt = "tofro";			/* spot moving right, left */

expt = "tofro";  		/* Set "expt" value on command line or here */
				/*  to run different experiment. */

v_bp_dark = -.05;		/* bp dark voltage */
v_bp_light = -.042;		/* bp light voltage */

ds_orient = 0;
ds_odt    = PI/20;

dd = setvar();			/* set values from command line */

if (notinit(anatfile)) anatfile = "ds1a";        /* defines cell anatomy */

/*-------------- set build params ---------------------------*/

/* parameters to set before building model */

if (expt == "istim_soma") {	/* somatic current stimulus, one step */

  make_bp	= 0; 	 	/* =1 -> make bipolar cell */
  make_amac	= 0; 	 	/* =1 -> make amacrine cell */
  make_bpgc	= 0; 	 	/* =1 -> make bipolar cell -> GC synapses */
  make_bpam	= 0; 	 	/* =1 -> make bipolar cell -> amac synapses */
  make_amgc	= 0; 	 	/* =1 -> make amacrine cell -> GC synapses */
  if (notinit(gcv)) gcv = -.07;	/* gc initial resting potential */
}
else if (expt == "epsc") {		/* somatic current stimulus, one step */
  make_amgc	= 0; 	 	/* =1 -> make amacrine cell -> GC synapses */
}
else if (expt == "fro") {	/* spot moving left  */
}
else if (expt == "to") {	/* spot moving right */
};
 
/*-------------- make ---------------------------------------*/

dim bpamsyns[1000];		/* array to hold synapse numbers */
dim bpgcsyns[1000];
dim amgcsyns[1000];

bp_zloc   = 15;		/* bp stratum */
amac_zloc = 14;		/* amacrine stratum */
gc_zloc   = 10;		/* GC dendrite arborization stratum */

xseg = 20;		/* length of segment of GC, amac, bipolar spacing */

ld = 1;			/* left  dendrite */
rd = 0;			/* right dendrite */

if (notinit(gcv))    gcv    = -.03;
if (notinit(vstart)) vstart = -.07;        /* starting voltage on dend tree */
if (notinit(dia_factor)) dia_factor = 1;   /* factor to scale dia of dendrites */
if (notinit(simple_ds_cell)) simple_ds_cell = 0;
   
if (make_gc) include ("gcdefs.n");

if (make_gc) {

   fread (anatfile, cabldata, clines, ccols);      /* read anatomy file */

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

   proc make_gcseg(nod1, nod2, d, region) /* proc to make dendrites */
   {
     local local_cplam;
     if (nod1 > nod2) {swap=nod1; nod1=nod2; nod2=swap;}; /* now: nod2 >=nod1 */

    if (region==HILLOCK || region==AXON_THIN)     /* set fine comps in axon */
         local_cplam = .02
    else local_cplam = complam;

    if (region==DEND) {           /* allow changing diameter in dendrites */
      d *= dia_factor;
    };
    if (region == SOMA) at [gang][nod1] sphere dia d vrest=vstart
    else conn [gang][nod1] to [gang][nod2] cable dia d vrest=vstart;
   };  /* make_gcseg() */

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
 
   if (notinit(dendn)) dendn = -1;
 
   for (i=0; i<clines; i++) {              /* locate the nodes first */

    /* If "dendn" is set non-negative, */
    /*  allow constructing only a single dendrite */
 
    if (ccols>DENDN) {
      dend = cabldata[i][DENDN];
      if ((dendn>=0) && (dend > 0) && (dend!=dendn)) continue;
    };

    n = cabldata[i][NODE];
    at [gang][n]                        /* locate the nodes */
            loc(cabldata[i][AX],
                cabldata[i][AY],
                cabldata[i][AZ]);
 
    make_gcseg (n, cabldata[i][PAR],       /* make the dendritic tree and axon */
               cabldata[i][DIA],
               cabldata[i][REG]);
   };

 

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

        /* find existing dendrites of GC */

  xmax = -1e6;
  xmin =  1e6;
  ymax = -1e6;
  ymin =  1e6;
  foreach node [gang] ?d  {  /* find existing dendritic tree */
    if (d > 65) {
      if (node [gang][d] -> xloc > xmax) xmax = node [gang][d] -> xloc;
      if (node [gang][d] -> xloc < xmin) xmin = node [gang][d] -> xloc;
      if (node [gang][d] -> yloc > ymax) ymax = node [gang][d] -> yloc;
      if (node [gang][d] -> yloc < ymin) ymin = node [gang][d] -> yloc;
    };
  };
  gcmargin = 20;
  xmax += gcmargin;
  ymax += gcmargin;
  xmin -= gcmargin;
  ymin -= gcmargin;

  xsize = xmax - xmin;
  ysize = ymax - ymin;
  xcent = int((xmax + xmin) * .5);
  ycent = int((ymax + ymin) * .5);

  gc_area = (xmax - xmin) * (ymax - ymin);
  //print "gc area", gc_area;
  //print "X max, min", xmax, xmin;
  //print "Y max, min", ymax, ymin;

};  /* if (make_gc) */

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

if (make_bp) {					/* make bipolar cells */

   /* Make only enough bipolar cells to fill GC's dendritic field */
 
   if (notinit(bp_nn))      bp_nn = 12;

   n_bp = gausnn (bparr, center (xcent,ycent), size (xsize,ysize), 
		nnd bp_nn, reg 10);
   printf ("# number of bipolar cells %g\n",n_bp);

   for (i=0; i<n_bp; i++) {
        local bpx,bpy,bpt,bpb;

     /* make random amacrine array */

     bpx = bparr[i][0];		/* make random offset */
     bpy = bparr[i][1];
     at [bipl][i] loc (bpx,bpy,bp_zloc) sphere dia 5 vrev -.07 vrest -.07;
     if (light_resp) at [bipl][i] transducer (bpx,bpy);
  };
};

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

if (make_amac) {			/* make amacrine cells */

   if (notinit(am_nn))      am_nn      =  40;
   if (notinit(n_amseg))    n_amseg    =  20;
   if (notinit(am_seglen))  am_seglen  =  10;

/* -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - */

   proc makamac(n,x,y,z,t,nbr) 
{
   /* Make one amacrine cell, given position and rotation. */

     local d, dbr, dt, i, r, u;
 
    at [amac][n][soma] loc (x, y, z) sphere dia 7;

    dt = 2 * PI / nbr;

    for (d=1; d<=n_amseg; d++) {

      r = d * am_seglen;		/* extend branches one varicosity  */
					/* at at time */

      for (i=0; i<nbr; i++) {		/* make "nbr" branches */
         dbr = d + i*n_amseg;
         u = t + i*dt;
         at [amac][n][dbr] loc (x+r*cos(u),y+r*sin(u),z) sphere dia 2;
         if (d==1) { /* connect varicosities with thin cable */
           conn [amac][n][dbr] to [amac][n][soma] cable dia 0.1 
                               rm amrm vrev -.07 vrest -.07;
         }
         else {
           conn [amac][n][dbr] to [amac][n][dbr-1] cable dia 0.1 
                               rm amrm vrev -.07 vrest -.07;
	 };
      };
   };
 };    /* proc makamac() */

/* -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - */

   /* Make only enough amacrine cells to fill GC's dendritic field */
 
   n_am = gausnn (amarr, center (xcent,ycent), size (xsize,ysize), 
		nnd am_nn, reg 5);
   printf ("# number of amacrine cells %g\n",n_am);

   for (i=0; i<n_am; i++) {
        local amx,amy,amt,amb;

      /* make random amacrine array */

      amx = amarr[i][0];		/* make random offset */
      amy = amarr[i][1];
      //amt = rrange(0,2*PI);		/* make random theta */
      amt = rrange(ds_orient-ds_odt, ds_orient+ds_odt);  /* make random theta */
      //amb = rrange(5,8);
      amb = 1;				/* make 1 branch */
      makamac(i+1,amx,amy,amac_zloc,amt,amb);

   };
};

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

if (make_bpsyn) {
  if (make_bpgc) {
      local mindist, dist, close_gc;

    if (notinit(bpsyn_dist_thresh)) bpsyn_dist_thresh = 7;
    if (notinit(gc_dend_min)) gc_dend_min = 65;

    nbpgc_syn = 0;
    foreach node [bipl] ?b {
      mindist = 1e10;
      close_gc = 0;
      foreach node [gang] ?d {
       if (d < gc_dend_min) continue;
       if ((dist=n2dist([bipl][b],[gang][d])) < mindist) {
           mindist = dist;			/* remember this dist */
	   close_gc = d;			/* save gc node */
       };
       //print dist;
      };
      if (mindist < bpsyn_dist_thresh) {
        conn [bipl][b] to [gang][close_gc]
        synapse open expon=expon1 maxcond=nchanbp*condf
        vgain=1
        kd 0.5 
        vesnoise=ves_noise vsize=vsiz nfilt2 1 timec2 sfdur
        chnoise= postsyn_noise unit=condf
        nfilt3 2 timec3=srdur
        thresh=thresh1  vrev=0 nfilt1 1 timec1 1
        ename bpgcsyns[b];
        nbpgc_syn++;
      };
    };
    printf ("# number of bpgc synapses %g\n",nbpgc_syn);
  };
};

  if (make_bpam && make_amac) {		/* synapse from bipolar to amacrine */
      local mindist, dist, close_am;

    if (notinit(bpam_dist_thresh)) bpam_dist_thresh = 10;
    if (notinit(amac_input_dist)) amac_input_dist = 30;  /* amac input closer */

    nbpam_syn = 0;
    foreach node [bipl] ?b {
      mindist = 1e10;
      close_am_n = 0;
      close_am_d = 0;
      foreach node [amac] ?n ?d {

		/* don't connect inputs to peripheral amac dendrites */
       if (n2dist([amac][n][soma],[amac][n][d]) > amac_input_dist) continue;

       if ((dist=n2dist([bipl][b],[amac][n][d])) < mindist) {
           mindist = dist;			/* remember this dist */
	   close_am_n = n;			/* save am number */
	   close_am_d = d;			/* save am node */
       };
       //print dist;
      };
      if (mindist < bpam_dist_thresh) {
        conn [bipl][b] to [amac][close_am_n][close_am_d]
        synapse open expon=expon1 maxcond=nchanbpam*amu
        vgain=1
        kd 0.5
        vesnoise=ves_noise vsize=vsiz nfilt2 1 timec2 sfdur
        chnoise= postsyn_noise unit=amu
        nfilt3 2 timec3=srdur
        thresh=thresh1  vrev=0 nfilt1 1 timec1 1
        ename bpamsyns[b];
        nbpam_syn++;
     };
   };
  printf ("# number of bpam synapses %g\n",nbpam_syn);
};

if (make_amgc && make_amac) {
    for (i=soma+1; i<ndseg; i++) {     /* synapse from am to GC dendrite */
      conn [amac][i][1] to [gang][rd][i]
      synapse open expon=exponamgc maxcond=nchanam*condf
      vgain=1
      kd 0.5
      vesnoise=ves_noise vsize=vsiz nfilt2 1 timec2 sfdur
      chnoise= postsyn_noise unit=condf
      nfilt3 2 timec3=srdur
      thresh=thresh1  vrev=-.07 
      ename amgcsyns[i];
    };
};

/* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

  /* limit the elements to within bounds */


elimit X max xmax min xmin Y max ymax min ymin;
foreach element ?c node [-1][-1][-1]  {
  elimit element c;
};

/*-------------- display ------------------------------------*/

if (disp) {
 display size 450;
 display center (0,0,10);
 display calibline 20;
 if (notinit(dxrot)) dxrot = 0;
 display xrot dxrot;

/* display matching [gang][0][-1] except cable;			/* */
/* display sphere matching [bipl][-1];				/* */
// display synapse matching [bipl][-1] color 4;			/* */

if (1) { 			/* display everything */ 
  display sphere matching [gang][-1][-1] color 1;               /* */
  display cable  matching [gang][-1][-1] color 1 dscale 1;	/* */
  display node   matching [gang][-1][-1] color 5 dscale 1;	/* */
  display comps  matching [gang][-1][-1] color 4;		/* */
 };
if (1) { 			/* display bipolar */ 
  display sphere matching [bipl][-1] color 4;                   /* */
  display cable  matching [bipl][-1] dscale 1 color 4;		/* */
  display node   matching [bipl][-1] color 5 dscale 1;		/* */
  display comps  matching [bipl][-1] color 4;			/* */
 };
if (1) { 			/* display amacrine */ 
  display sphere matching [amac][-1][-1] color 5 dscale 1;      /* */
  display cable  matching [amac][-1][-1] color 2 dscale 1;	/* */
  display node   matching [amac][-1][-1] color 5 dscale 1;	/* */
  display comps  matching [amac][-1][-1] color 4 dscale 1;	/* */
 };
if (1) { 			/* display bp->gc synapses */ 
  display synapse matching [gang][-1]     color 5 dscale 2;     /* */
  display synapse matching [amac][-1][-1] color 5 dscale 2;     /* */
 };

 exit;		/* exit when done display */

};


/* =========== stim =========================================*/

stim center (xseg*ndseg/2,0);

if (expt == "surf_area") {	/* calculate surface area */
 totsa 	= 0;
 foreach cable ?d node [gang][-1][-1] {
		totsa += PI*element d->dia*element d->length;};
 printf ("# Surface area of dendrites   = %g um2\n",totsa);
 foreach sphere ?d node [gang][-1] {local r;  r = element d->dia/2;
 		totsa += 4*PI*r*r; };
 printf ("# Surface area including soma = %g um2\n",totsa);
 printf ("# Rin estimated from surface area = %g\n",drm/totsa*1e8);
}
else if (expt == "istim_soma") {	/* soma current stimulus */
	if (notinit(istim)) istim = 10e-12;
	if (notinit(stimdur)) stimdur = .2;
    	endexp=stimdur;
	stim node [gang][soma] cclamp istim start .02 dur stimdur; 
	gc_vplg = .1;
  	gc_vplot = 1;
}
else if (expt == "epsc") {        /* spot, short flash with vclamp to see epsc*/

	if (notinit(istim)) istim = 100e-12;
	if (notinit(stimdur)) stimdur = .06;
	stim backgr v_bp_dark start 0;
	stimdur  = .1;
	stim spot 1000 loc (0,0) inten .005 start=time dur=stimdur;
	endexp = .4;
	gc_iplot = 1;
}
else if (expt == "to") {
	stim file "ds_to.t";
        stim backgr v_bp_dark start 0;
	velocity = 3000;
        xnear = -2*xseg;
        xfar = xseg*(ndseg+3);
        xstep=xseg/10;
        stimstep = xstep / velocity;
	for (t=0,x=xnear; x<=xfar; x+= xstep,t += stimstep) {
    	  stim bar 10 loc(x) blur 30 inten .06 start t dur stimstep; 
   	}; 
	endexp= (xfar-xnear+1)/xstep * stimstep;
	gc_iplot = 1;
}
else if (expt == "fro") {
	stim file "ds_fro.t";
        stim backgr v_bp_dark start 0;
	velocity = 3000;
        xnear = -2*xseg;
        xfar = xseg*(ndseg+3);
        xstep=xseg/10;
        stimstep = xstep / velocity;
	for (t=0,x=xfar; x >= xnear; x-= xstep,t += stimstep) {
    	  stim bar 10 loc(x) blur 30 inten .06 start t dur stimstep; 
   	}; 
	endexp= (xfar-xnear+1)/xstep * stimstep;
	gc_iplot = 1;
}
else if (expt == "tofro") {
	stim file "ds_tofro.t";
        stim backgr v_bp_dark start 0;
	velocity = 3000;
        xnear = -2*xseg;
        xfar = xseg*(ndseg+3);
        xstep=xseg/10;
        stimstep = xstep / velocity;
	for (t=0,x=xnear; x<=xfar; x+= xstep,t += stimstep) {
    	  stim bar 10 loc(x) blur 30 inten .06 start t dur stimstep; 
   	}; 
	for (x=xfar; x >= xnear; x-= xstep,t += stimstep) {
    	  stim bar 10 loc(x) blur 30 inten .06 start t dur stimstep; 
   	}; 
	endexp= 2 * (xfar-xnear+1)/xstep * stimstep;
	gc_iplot = 1;
};

/*------------ plot -----------------------------------------*/

if (notinit(gc_iplot)) gc_iplot = 0;
if (notinit(gc_vplot)) gc_vplot = 0;

if (gc_iplot) stim node [gang][soma] vclamp gcv start 0 dur 1;
 

if (make_bp) {
  plg   = .03;		/* gain of trace */
  offtr = .3;		/* position of trace within graph */
  offb  = -.05;		/* trace offset base */

  for (i=1; i<=10; i++) {
    if (i<=1)str="Vbp"
    else     str="";
    plot V[bipl][i] max (1-offtr)*plg+offb min (0-offtr)*plg+offb 
					plsize 1 plname str plnum 7;
  };
};

plgain = 100;		/* gain of trace */
offtr = .0;		/* position of trace within graph */
offb  = 0;		/* trace offset base */

if (make_bpgc) plot FA9 bpgcsyns[5] max (1-offtr)*plgain+offb 
				    min (0-offtr)*plgain+offb 
					pen 5 plname "BpGc" plnum 6;

if (make_amac) plot V[amac][5][1] min -0.08 max 0.01 
					pen 12 plname "Vam" plnum 5; 

if (make_amgc) plot FA9 amgcsyns[5] max (1-offtr)*plgain+offb 
				    min (0-offtr)*plgain+offb 
					pen 6 plname "AmGc" plnum 4;


plg = 10e-12;				/* gain of trace */
offb   = 2e-12;				/* trace offset base */
offtr  = .2;				/* position of trace within graph */

if (gc_iplot) plot I[gang][soma] max (1-offtr)*plg+offb 
		   		 min (0-offtr)*plg+offb 
					pen 2 plname "Igc" plnum 1 plsize .5;

if (notinit(gc_vplg)) gc_vplg = .1;	/* gain of trace */
offtr = .3;		/* position of trace within graph */
offb  = -.05;		/* trace offset base */

if (gc_vplot) plot V[gang][soma] max (1-offtr)*gc_vplg+offb 
		   		 min (0-offtr)*gc_vplg+offb 
					pen 2 plname "Vgc" plnum 1;

//plot V[gang][rd][2] min -0.08 max 0.01 plname "Vdend"; /*dendr syn input */

run;
